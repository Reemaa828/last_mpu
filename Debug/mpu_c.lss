
mpu_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003316  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  00003316  000033aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800176  00800176  000034c0  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  000034c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012f7  00000000  00000000  00005c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00007117  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00007307  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00009713  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000aa8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bc64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000be24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000c117  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cae5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 02 15 	call	0x2a04	; 0x2a04 <main>
      8a:	0c 94 89 19 	jmp	0x3312	; 0x3312 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e6       	ldi	r22, 0x6E	; 110
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	ea 58       	subi	r30, 0x8A	; 138
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <DIO_SetPinDirection>:




u8 DIO_SetPinDirection(u8 PORT_Num, u8 PIN_Num, u8 PIN_Direction)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <DIO_SetPinDirection+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <DIO_SetPinDirection+0x8>
     e00:	00 d0       	rcall	.+0      	; 0xe02 <DIO_SetPinDirection+0xa>
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	8a 83       	std	Y+2, r24	; 0x02
     e08:	6b 83       	std	Y+3, r22	; 0x03
     e0a:	4c 83       	std	Y+4, r20	; 0x04

	u8 Func_Stat0 = OK;
     e0c:	19 82       	std	Y+1, r1	; 0x01

	if ((PORT_Num > PORTD_Num) || (PIN_Num > PIN_Num7) || (PIN_Direction > Output))
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	84 30       	cpi	r24, 0x04	; 4
     e12:	30 f4       	brcc	.+12     	; 0xe20 <DIO_SetPinDirection+0x28>
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	88 30       	cpi	r24, 0x08	; 8
     e18:	18 f4       	brcc	.+6      	; 0xe20 <DIO_SetPinDirection+0x28>
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	18 f0       	brcs	.+6      	; 0xe26 <DIO_SetPinDirection+0x2e>
	{
		Func_Stat0 = NOK;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	e0 c0       	rjmp	.+448    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
	}

	else
	{
		switch (PORT_Num)
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	3e 83       	std	Y+6, r19	; 0x06
     e2e:	2d 83       	std	Y+5, r18	; 0x05
     e30:	8d 81       	ldd	r24, Y+5	; 0x05
     e32:	9e 81       	ldd	r25, Y+6	; 0x06
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	91 05       	cpc	r25, r1
     e38:	09 f4       	brne	.+2      	; 0xe3c <DIO_SetPinDirection+0x44>
     e3a:	47 c0       	rjmp	.+142    	; 0xeca <DIO_SetPinDirection+0xd2>
     e3c:	2d 81       	ldd	r18, Y+5	; 0x05
     e3e:	3e 81       	ldd	r19, Y+6	; 0x06
     e40:	22 30       	cpi	r18, 0x02	; 2
     e42:	31 05       	cpc	r19, r1
     e44:	2c f4       	brge	.+10     	; 0xe50 <DIO_SetPinDirection+0x58>
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	71 f0       	breq	.+28     	; 0xe6a <DIO_SetPinDirection+0x72>
     e4e:	cb c0       	rjmp	.+406    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
     e50:	2d 81       	ldd	r18, Y+5	; 0x05
     e52:	3e 81       	ldd	r19, Y+6	; 0x06
     e54:	22 30       	cpi	r18, 0x02	; 2
     e56:	31 05       	cpc	r19, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <DIO_SetPinDirection+0x64>
     e5a:	67 c0       	rjmp	.+206    	; 0xf2a <DIO_SetPinDirection+0x132>
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	9e 81       	ldd	r25, Y+6	; 0x06
     e60:	83 30       	cpi	r24, 0x03	; 3
     e62:	91 05       	cpc	r25, r1
     e64:	09 f4       	brne	.+2      	; 0xe68 <DIO_SetPinDirection+0x70>
     e66:	91 c0       	rjmp	.+290    	; 0xf8a <DIO_SetPinDirection+0x192>
     e68:	be c0       	rjmp	.+380    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
		{
		  case PORTA_Num:
			if(PIN_Direction == Input)
     e6a:	8c 81       	ldd	r24, Y+4	; 0x04
     e6c:	88 23       	and	r24, r24
     e6e:	a9 f4       	brne	.+42     	; 0xe9a <DIO_SetPinDirection+0xa2>
			{
				CLR_BIT(DDRA,PIN_Num);
     e70:	aa e3       	ldi	r26, 0x3A	; 58
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	ea e3       	ldi	r30, 0x3A	; 58
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <DIO_SetPinDirection+0x96>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <DIO_SetPinDirection+0x92>
     e92:	80 95       	com	r24
     e94:	84 23       	and	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	a6 c0       	rjmp	.+332    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
			}
			else if(PIN_Direction==Output)
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	09 f0       	breq	.+2      	; 0xea2 <DIO_SetPinDirection+0xaa>
     ea0:	a2 c0       	rjmp	.+324    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
			{
				SET_BIT(DDRA, PIN_Num);
     ea2:	aa e3       	ldi	r26, 0x3A	; 58
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ea e3       	ldi	r30, 0x3A	; 58
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	48 2f       	mov	r20, r24
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	02 2e       	mov	r0, r18
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <DIO_SetPinDirection+0xc8>
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	0a 94       	dec	r0
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <DIO_SetPinDirection+0xc4>
     ec4:	84 2b       	or	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	8e c0       	rjmp	.+284    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
			}

			break;
		  case PORTB_Num:
			if(PIN_Direction == Input)
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	88 23       	and	r24, r24
     ece:	a9 f4       	brne	.+42     	; 0xefa <DIO_SetPinDirection+0x102>
			{
				CLR_BIT(DDRB,PIN_Num);
     ed0:	a7 e3       	ldi	r26, 0x37	; 55
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e7 e3       	ldi	r30, 0x37	; 55
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <DIO_SetPinDirection+0xf6>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <DIO_SetPinDirection+0xf2>
     ef2:	80 95       	com	r24
     ef4:	84 23       	and	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	76 c0       	rjmp	.+236    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
			}
			else if(PIN_Direction==Output)
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	09 f0       	breq	.+2      	; 0xf02 <DIO_SetPinDirection+0x10a>
     f00:	72 c0       	rjmp	.+228    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
			{
				SET_BIT(DDRB, PIN_Num);
     f02:	a7 e3       	ldi	r26, 0x37	; 55
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e7 e3       	ldi	r30, 0x37	; 55
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_SetPinDirection+0x128>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_SetPinDirection+0x124>
     f24:	84 2b       	or	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	5e c0       	rjmp	.+188    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
			}
			break;
		  case PORTC_Num:
			if(PIN_Direction == Input)
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	88 23       	and	r24, r24
     f2e:	a9 f4       	brne	.+42     	; 0xf5a <DIO_SetPinDirection+0x162>
			{
				CLR_BIT(DDRC,PIN_Num);
     f30:	a4 e3       	ldi	r26, 0x34	; 52
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e4 e3       	ldi	r30, 0x34	; 52
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_SetPinDirection+0x156>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_SetPinDirection+0x152>
     f52:	80 95       	com	r24
     f54:	84 23       	and	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	46 c0       	rjmp	.+140    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
			}
			else if(PIN_Direction==Output)
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	09 f0       	breq	.+2      	; 0xf62 <DIO_SetPinDirection+0x16a>
     f60:	42 c0       	rjmp	.+132    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
			{
				SET_BIT(DDRC, PIN_Num);
     f62:	a4 e3       	ldi	r26, 0x34	; 52
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e4 e3       	ldi	r30, 0x34	; 52
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_SetPinDirection+0x188>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_SetPinDirection+0x184>
     f84:	84 2b       	or	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	2e c0       	rjmp	.+92     	; 0xfe6 <DIO_SetPinDirection+0x1ee>
			}
			break;
		  case PORTD_Num:
		 	if(PIN_Direction == Input)
     f8a:	8c 81       	ldd	r24, Y+4	; 0x04
     f8c:	88 23       	and	r24, r24
     f8e:	a9 f4       	brne	.+42     	; 0xfba <DIO_SetPinDirection+0x1c2>
			{
				CLR_BIT(DDRD,PIN_Num);
     f90:	a1 e3       	ldi	r26, 0x31	; 49
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e1 e3       	ldi	r30, 0x31	; 49
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_SetPinDirection+0x1b6>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_SetPinDirection+0x1b2>
     fb2:	80 95       	com	r24
     fb4:	84 23       	and	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	16 c0       	rjmp	.+44     	; 0xfe6 <DIO_SetPinDirection+0x1ee>
			}
			else if(PIN_Direction==Output)
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	99 f4       	brne	.+38     	; 0xfe6 <DIO_SetPinDirection+0x1ee>
			{
				SET_BIT(DDRD, PIN_Num);
     fc0:	a1 e3       	ldi	r26, 0x31	; 49
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e1 e3       	ldi	r30, 0x31	; 49
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_SetPinDirection+0x1e6>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_SetPinDirection+0x1e2>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
			}
			break;
		}
	}
	return Func_Stat0;
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe8:	26 96       	adiw	r28, 0x06	; 6
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <DIO_SetPinValue>:

u8 DIO_SetPinValue(u8 PORT_Num, u8 PIN_Num, u8 PIN_Value)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <DIO_SetPinValue+0x6>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <DIO_SetPinValue+0x8>
    1002:	00 d0       	rcall	.+0      	; 0x1004 <DIO_SetPinValue+0xa>
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	8a 83       	std	Y+2, r24	; 0x02
    100a:	6b 83       	std	Y+3, r22	; 0x03
    100c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Func_Stat1 = OK;
    100e:	19 82       	std	Y+1, r1	; 0x01

	if ((PORT_Num > PORTD_Num) || (PIN_Num > PIN_Num7) || (PIN_Value > High))
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	84 30       	cpi	r24, 0x04	; 4
    1014:	30 f4       	brcc	.+12     	; 0x1022 <DIO_SetPinValue+0x28>
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	88 30       	cpi	r24, 0x08	; 8
    101a:	18 f4       	brcc	.+6      	; 0x1022 <DIO_SetPinValue+0x28>
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	82 30       	cpi	r24, 0x02	; 2
    1020:	18 f0       	brcs	.+6      	; 0x1028 <DIO_SetPinValue+0x2e>
	{
		Func_Stat1 = NOK;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	e0 c0       	rjmp	.+448    	; 0x11e8 <DIO_SetPinValue+0x1ee>
	}
	else
	{
		switch(PORT_Num)
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3e 83       	std	Y+6, r19	; 0x06
    1030:	2d 83       	std	Y+5, r18	; 0x05
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	9e 81       	ldd	r25, Y+6	; 0x06
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	91 05       	cpc	r25, r1
    103a:	09 f4       	brne	.+2      	; 0x103e <DIO_SetPinValue+0x44>
    103c:	47 c0       	rjmp	.+142    	; 0x10cc <DIO_SetPinValue+0xd2>
    103e:	2d 81       	ldd	r18, Y+5	; 0x05
    1040:	3e 81       	ldd	r19, Y+6	; 0x06
    1042:	22 30       	cpi	r18, 0x02	; 2
    1044:	31 05       	cpc	r19, r1
    1046:	2c f4       	brge	.+10     	; 0x1052 <DIO_SetPinValue+0x58>
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	71 f0       	breq	.+28     	; 0x106c <DIO_SetPinValue+0x72>
    1050:	cb c0       	rjmp	.+406    	; 0x11e8 <DIO_SetPinValue+0x1ee>
    1052:	2d 81       	ldd	r18, Y+5	; 0x05
    1054:	3e 81       	ldd	r19, Y+6	; 0x06
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <DIO_SetPinValue+0x64>
    105c:	67 c0       	rjmp	.+206    	; 0x112c <DIO_SetPinValue+0x132>
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	83 30       	cpi	r24, 0x03	; 3
    1064:	91 05       	cpc	r25, r1
    1066:	09 f4       	brne	.+2      	; 0x106a <DIO_SetPinValue+0x70>
    1068:	91 c0       	rjmp	.+290    	; 0x118c <DIO_SetPinValue+0x192>
    106a:	be c0       	rjmp	.+380    	; 0x11e8 <DIO_SetPinValue+0x1ee>
		{
		case PORTA_Num:
			if(PIN_Value == High)
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	a1 f4       	brne	.+40     	; 0x109a <DIO_SetPinValue+0xa0>
			{
				SET_BIT(PORTA, PIN_Num);
    1072:	ab e3       	ldi	r26, 0x3B	; 59
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	eb e3       	ldi	r30, 0x3B	; 59
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_SetPinValue+0x96>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_SetPinValue+0x92>
    1094:	84 2b       	or	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	a7 c0       	rjmp	.+334    	; 0x11e8 <DIO_SetPinValue+0x1ee>
			}
			else if(PIN_Value == Low)
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	88 23       	and	r24, r24
    109e:	09 f0       	breq	.+2      	; 0x10a2 <DIO_SetPinValue+0xa8>
    10a0:	a3 c0       	rjmp	.+326    	; 0x11e8 <DIO_SetPinValue+0x1ee>
			{
				CLR_BIT(PORTA, PIN_Num);
    10a2:	ab e3       	ldi	r26, 0x3B	; 59
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	eb e3       	ldi	r30, 0x3B	; 59
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_SetPinValue+0xc6>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_SetPinValue+0xc2>
    10c4:	80 95       	com	r24
    10c6:	84 23       	and	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	8e c0       	rjmp	.+284    	; 0x11e8 <DIO_SetPinValue+0x1ee>
			}
			break;
		case PORTB_Num:
			if(PIN_Value == High)
    10cc:	8c 81       	ldd	r24, Y+4	; 0x04
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	a1 f4       	brne	.+40     	; 0x10fa <DIO_SetPinValue+0x100>
			{
				SET_BIT(PORTB, PIN_Num);
    10d2:	a8 e3       	ldi	r26, 0x38	; 56
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e8 e3       	ldi	r30, 0x38	; 56
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_SetPinValue+0xf6>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_SetPinValue+0xf2>
    10f4:	84 2b       	or	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	77 c0       	rjmp	.+238    	; 0x11e8 <DIO_SetPinValue+0x1ee>
			}
			else if(PIN_Value == Low)
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	88 23       	and	r24, r24
    10fe:	09 f0       	breq	.+2      	; 0x1102 <DIO_SetPinValue+0x108>
    1100:	73 c0       	rjmp	.+230    	; 0x11e8 <DIO_SetPinValue+0x1ee>
			{
				CLR_BIT(PORTB, PIN_Num);
    1102:	a8 e3       	ldi	r26, 0x38	; 56
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e8 e3       	ldi	r30, 0x38	; 56
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_SetPinValue+0x126>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_SetPinValue+0x122>
    1124:	80 95       	com	r24
    1126:	84 23       	and	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	5e c0       	rjmp	.+188    	; 0x11e8 <DIO_SetPinValue+0x1ee>
			}
			break;
		case PORTC_Num:
			if(PIN_Value == High)
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	a1 f4       	brne	.+40     	; 0x115a <DIO_SetPinValue+0x160>
			{
				SET_BIT(PORTC, PIN_Num);
    1132:	a5 e3       	ldi	r26, 0x35	; 53
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e5 e3       	ldi	r30, 0x35	; 53
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	48 2f       	mov	r20, r24
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 2e       	mov	r0, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <DIO_SetPinValue+0x156>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	0a 94       	dec	r0
    1152:	e2 f7       	brpl	.-8      	; 0x114c <DIO_SetPinValue+0x152>
    1154:	84 2b       	or	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	47 c0       	rjmp	.+142    	; 0x11e8 <DIO_SetPinValue+0x1ee>
			}
			else if(PIN_Value == Low)
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	88 23       	and	r24, r24
    115e:	09 f0       	breq	.+2      	; 0x1162 <DIO_SetPinValue+0x168>
    1160:	43 c0       	rjmp	.+134    	; 0x11e8 <DIO_SetPinValue+0x1ee>
			{
				CLR_BIT(PORTC, PIN_Num);
    1162:	a5 e3       	ldi	r26, 0x35	; 53
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e5 e3       	ldi	r30, 0x35	; 53
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_SetPinValue+0x186>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_SetPinValue+0x182>
    1184:	80 95       	com	r24
    1186:	84 23       	and	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	2e c0       	rjmp	.+92     	; 0x11e8 <DIO_SetPinValue+0x1ee>
		    }
			break;
		case PORTD_Num:
			if(PIN_Value == High)
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	a1 f4       	brne	.+40     	; 0x11ba <DIO_SetPinValue+0x1c0>
			{
				SET_BIT(PORTD, PIN_Num);
    1192:	a2 e3       	ldi	r26, 0x32	; 50
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e2 e3       	ldi	r30, 0x32	; 50
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_SetPinValue+0x1b6>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_SetPinValue+0x1b2>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	17 c0       	rjmp	.+46     	; 0x11e8 <DIO_SetPinValue+0x1ee>
			}
			else if(PIN_Value == Low)
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	88 23       	and	r24, r24
    11be:	a1 f4       	brne	.+40     	; 0x11e8 <DIO_SetPinValue+0x1ee>
			{
				CLR_BIT(PORTD, PIN_Num);
    11c0:	a2 e3       	ldi	r26, 0x32	; 50
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e2 e3       	ldi	r30, 0x32	; 50
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_SetPinValue+0x1e4>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_SetPinValue+0x1e0>
    11e2:	80 95       	com	r24
    11e4:	84 23       	and	r24, r20
    11e6:	8c 93       	st	X, r24
		    }
			break;
		}
	}
	return Func_Stat1;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ea:	26 96       	adiw	r28, 0x06	; 6
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <DIO_SetPortDirection>:
u8 DIO_SetPortDirection(u8 PORT_Num, u8 PORT_Direction)
{
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	00 d0       	rcall	.+0      	; 0x1202 <DIO_SetPortDirection+0x6>
    1202:	00 d0       	rcall	.+0      	; 0x1204 <DIO_SetPortDirection+0x8>
    1204:	0f 92       	push	r0
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	8a 83       	std	Y+2, r24	; 0x02
    120c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Func_Stat2 = OK;
    120e:	19 82       	std	Y+1, r1	; 0x01
	if((PORT_Num > PORTD_Num) || (PORT_Direction > Output))
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	84 30       	cpi	r24, 0x04	; 4
    1214:	18 f4       	brcc	.+6      	; 0x121c <DIO_SetPortDirection+0x20>
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	82 30       	cpi	r24, 0x02	; 2
    121a:	18 f0       	brcs	.+6      	; 0x1222 <DIO_SetPortDirection+0x26>
	{
		Func_Stat2 = NOK;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	5a c0       	rjmp	.+180    	; 0x12d6 <DIO_SetPortDirection+0xda>
	}
	else
	{
		switch(PORT_Num)
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	3d 83       	std	Y+5, r19	; 0x05
    122a:	2c 83       	std	Y+4, r18	; 0x04
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	9d 81       	ldd	r25, Y+5	; 0x05
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	21 f1       	breq	.+72     	; 0x127e <DIO_SetPortDirection+0x82>
    1236:	2c 81       	ldd	r18, Y+4	; 0x04
    1238:	3d 81       	ldd	r19, Y+5	; 0x05
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 05       	cpc	r19, r1
    123e:	2c f4       	brge	.+10     	; 0x124a <DIO_SetPortDirection+0x4e>
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	9d 81       	ldd	r25, Y+5	; 0x05
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	61 f0       	breq	.+24     	; 0x1260 <DIO_SetPortDirection+0x64>
    1248:	46 c0       	rjmp	.+140    	; 0x12d6 <DIO_SetPortDirection+0xda>
    124a:	2c 81       	ldd	r18, Y+4	; 0x04
    124c:	3d 81       	ldd	r19, Y+5	; 0x05
    124e:	22 30       	cpi	r18, 0x02	; 2
    1250:	31 05       	cpc	r19, r1
    1252:	21 f1       	breq	.+72     	; 0x129c <DIO_SetPortDirection+0xa0>
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	9d 81       	ldd	r25, Y+5	; 0x05
    1258:	83 30       	cpi	r24, 0x03	; 3
    125a:	91 05       	cpc	r25, r1
    125c:	71 f1       	breq	.+92     	; 0x12ba <DIO_SetPortDirection+0xbe>
    125e:	3b c0       	rjmp	.+118    	; 0x12d6 <DIO_SetPortDirection+0xda>
		{
		case PORTA_Num:
			if(PORT_Direction == Output)
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	29 f4       	brne	.+10     	; 0x1270 <DIO_SetPortDirection+0x74>
			{
				DDRA=255;
    1266:	ea e3       	ldi	r30, 0x3A	; 58
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	8f ef       	ldi	r24, 0xFF	; 255
    126c:	80 83       	st	Z, r24
    126e:	33 c0       	rjmp	.+102    	; 0x12d6 <DIO_SetPortDirection+0xda>
			}
			else if(PORT_Direction == Input)
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	88 23       	and	r24, r24
    1274:	81 f5       	brne	.+96     	; 0x12d6 <DIO_SetPortDirection+0xda>
			{
				DDRA=0;
    1276:	ea e3       	ldi	r30, 0x3A	; 58
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	10 82       	st	Z, r1
    127c:	2c c0       	rjmp	.+88     	; 0x12d6 <DIO_SetPortDirection+0xda>
			}
			break;
		case PORTB_Num:
			if(PORT_Direction == Output)
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	29 f4       	brne	.+10     	; 0x128e <DIO_SetPortDirection+0x92>
			{
				DDRB=255;
    1284:	e7 e3       	ldi	r30, 0x37	; 55
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	8f ef       	ldi	r24, 0xFF	; 255
    128a:	80 83       	st	Z, r24
    128c:	24 c0       	rjmp	.+72     	; 0x12d6 <DIO_SetPortDirection+0xda>
			}
			else if(PORT_Direction == Input)
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	88 23       	and	r24, r24
    1292:	09 f5       	brne	.+66     	; 0x12d6 <DIO_SetPortDirection+0xda>
			{
				DDRB=0;
    1294:	e7 e3       	ldi	r30, 0x37	; 55
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	10 82       	st	Z, r1
    129a:	1d c0       	rjmp	.+58     	; 0x12d6 <DIO_SetPortDirection+0xda>
			}
			break;
		case PORTC_Num:
			if(PORT_Direction == Output)
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	29 f4       	brne	.+10     	; 0x12ac <DIO_SetPortDirection+0xb0>
			{
				DDRC=255;
    12a2:	e4 e3       	ldi	r30, 0x34	; 52
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	8f ef       	ldi	r24, 0xFF	; 255
    12a8:	80 83       	st	Z, r24
    12aa:	15 c0       	rjmp	.+42     	; 0x12d6 <DIO_SetPortDirection+0xda>
			}
			else if(PORT_Direction == Input)
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	88 23       	and	r24, r24
    12b0:	91 f4       	brne	.+36     	; 0x12d6 <DIO_SetPortDirection+0xda>
			{
				DDRC=0;
    12b2:	e4 e3       	ldi	r30, 0x34	; 52
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	10 82       	st	Z, r1
    12b8:	0e c0       	rjmp	.+28     	; 0x12d6 <DIO_SetPortDirection+0xda>
			}
			break;
		case PORTD_Num:
			if(PORT_Direction == Output)
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	29 f4       	brne	.+10     	; 0x12ca <DIO_SetPortDirection+0xce>
			{
				DDRD=255;
    12c0:	e1 e3       	ldi	r30, 0x31	; 49
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	80 83       	st	Z, r24
    12c8:	06 c0       	rjmp	.+12     	; 0x12d6 <DIO_SetPortDirection+0xda>
			}
			else if(PORT_Direction == Input)
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	88 23       	and	r24, r24
    12ce:	19 f4       	brne	.+6      	; 0x12d6 <DIO_SetPortDirection+0xda>
			{
				DDRD=0;
    12d0:	e1 e3       	ldi	r30, 0x31	; 49
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	10 82       	st	Z, r1
			}
			break;
		}
	}
	return Func_Stat2;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <DIO_SetPortValue>:
u8 DIO_SetPortValue(u8 PORT_Num, u8 PORT_Value)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <DIO_SetPortValue+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <DIO_SetPortValue+0x8>
    12f0:	0f 92       	push	r0
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	8a 83       	std	Y+2, r24	; 0x02
    12f8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Func_Stat3 = OK;
    12fa:	19 82       	std	Y+1, r1	; 0x01
		if((PORT_Num > PORTD_Num) || (PORT_Direction > High))
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	84 30       	cpi	r24, 0x04	; 4
    1300:	20 f4       	brcc	.+8      	; 0x130a <DIO_SetPortValue+0x22>
    1302:	80 91 7b 01 	lds	r24, 0x017B
    1306:	82 30       	cpi	r24, 0x02	; 2
    1308:	18 f0       	brcs	.+6      	; 0x1310 <DIO_SetPortValue+0x28>
		{
			Func_Stat3 = NOK;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	32 c0       	rjmp	.+100    	; 0x1374 <DIO_SetPortValue+0x8c>
		}
		else
		{
			switch(PORT_Num)
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	3d 83       	std	Y+5, r19	; 0x05
    1318:	2c 83       	std	Y+4, r18	; 0x04
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	91 05       	cpc	r25, r1
    1322:	d1 f0       	breq	.+52     	; 0x1358 <DIO_SetPortValue+0x70>
    1324:	2c 81       	ldd	r18, Y+4	; 0x04
    1326:	3d 81       	ldd	r19, Y+5	; 0x05
    1328:	22 30       	cpi	r18, 0x02	; 2
    132a:	31 05       	cpc	r19, r1
    132c:	2c f4       	brge	.+10     	; 0x1338 <DIO_SetPortValue+0x50>
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	9d 81       	ldd	r25, Y+5	; 0x05
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	61 f0       	breq	.+24     	; 0x134e <DIO_SetPortValue+0x66>
    1336:	1e c0       	rjmp	.+60     	; 0x1374 <DIO_SetPortValue+0x8c>
    1338:	2c 81       	ldd	r18, Y+4	; 0x04
    133a:	3d 81       	ldd	r19, Y+5	; 0x05
    133c:	22 30       	cpi	r18, 0x02	; 2
    133e:	31 05       	cpc	r19, r1
    1340:	81 f0       	breq	.+32     	; 0x1362 <DIO_SetPortValue+0x7a>
    1342:	8c 81       	ldd	r24, Y+4	; 0x04
    1344:	9d 81       	ldd	r25, Y+5	; 0x05
    1346:	83 30       	cpi	r24, 0x03	; 3
    1348:	91 05       	cpc	r25, r1
    134a:	81 f0       	breq	.+32     	; 0x136c <DIO_SetPortValue+0x84>
    134c:	13 c0       	rjmp	.+38     	; 0x1374 <DIO_SetPortValue+0x8c>
			{
			case PORTA_Num:
				PORTA=PORT_Value;
    134e:	eb e3       	ldi	r30, 0x3B	; 59
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	80 83       	st	Z, r24
    1356:	0e c0       	rjmp	.+28     	; 0x1374 <DIO_SetPortValue+0x8c>
				break;
			case PORTB_Num:
				PORTB=PORT_Value;
    1358:	e8 e3       	ldi	r30, 0x38	; 56
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	80 83       	st	Z, r24
    1360:	09 c0       	rjmp	.+18     	; 0x1374 <DIO_SetPortValue+0x8c>
				break;
			case PORTC_Num:
				PORTC=PORT_Value;
    1362:	e5 e3       	ldi	r30, 0x35	; 53
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	80 83       	st	Z, r24
    136a:	04 c0       	rjmp	.+8      	; 0x1374 <DIO_SetPortValue+0x8c>
				break;
			case PORTD_Num:
				PORTD=PORT_Value;
    136c:	e2 e3       	ldi	r30, 0x32	; 50
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	80 83       	st	Z, r24
				break;
			}
		}
	return Func_Stat3;
    1374:	89 81       	ldd	r24, Y+1	; 0x01
}
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <DIO_GetPinValue>:
u8 DIO_GetPinValue(u8 PORT_Num, u8 PIN_Num, u8*Pin_Val)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	27 97       	sbiw	r28, 0x07	; 7
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	8a 83       	std	Y+2, r24	; 0x02
    139c:	6b 83       	std	Y+3, r22	; 0x03
    139e:	5d 83       	std	Y+5, r21	; 0x05
    13a0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Func_Stat4 = OK;
    13a2:	19 82       	std	Y+1, r1	; 0x01

		if((PORT_Num > PORTD_Num) || (PIN_Num > PIN_Num7))
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	18 f4       	brcc	.+6      	; 0x13b0 <DIO_GetPinValue+0x2a>
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	88 30       	cpi	r24, 0x08	; 8
    13ae:	18 f0       	brcs	.+6      	; 0x13b6 <DIO_GetPinValue+0x30>
		{
			Func_Stat4 = NOK;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	a1 c0       	rjmp	.+322    	; 0x14f8 <DIO_GetPinValue+0x172>
		}
		else
		{
		switch(PORT_Num)
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	3f 83       	std	Y+7, r19	; 0x07
    13be:	2e 83       	std	Y+6, r18	; 0x06
    13c0:	4e 81       	ldd	r20, Y+6	; 0x06
    13c2:	5f 81       	ldd	r21, Y+7	; 0x07
    13c4:	41 30       	cpi	r20, 0x01	; 1
    13c6:	51 05       	cpc	r21, r1
    13c8:	c1 f1       	breq	.+112    	; 0x143a <DIO_GetPinValue+0xb4>
    13ca:	8e 81       	ldd	r24, Y+6	; 0x06
    13cc:	9f 81       	ldd	r25, Y+7	; 0x07
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	91 05       	cpc	r25, r1
    13d2:	34 f4       	brge	.+12     	; 0x13e0 <DIO_GetPinValue+0x5a>
    13d4:	2e 81       	ldd	r18, Y+6	; 0x06
    13d6:	3f 81       	ldd	r19, Y+7	; 0x07
    13d8:	21 15       	cp	r18, r1
    13da:	31 05       	cpc	r19, r1
    13dc:	71 f0       	breq	.+28     	; 0x13fa <DIO_GetPinValue+0x74>
    13de:	8c c0       	rjmp	.+280    	; 0x14f8 <DIO_GetPinValue+0x172>
    13e0:	4e 81       	ldd	r20, Y+6	; 0x06
    13e2:	5f 81       	ldd	r21, Y+7	; 0x07
    13e4:	42 30       	cpi	r20, 0x02	; 2
    13e6:	51 05       	cpc	r21, r1
    13e8:	09 f4       	brne	.+2      	; 0x13ec <DIO_GetPinValue+0x66>
    13ea:	47 c0       	rjmp	.+142    	; 0x147a <DIO_GetPinValue+0xf4>
    13ec:	8e 81       	ldd	r24, Y+6	; 0x06
    13ee:	9f 81       	ldd	r25, Y+7	; 0x07
    13f0:	83 30       	cpi	r24, 0x03	; 3
    13f2:	91 05       	cpc	r25, r1
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <DIO_GetPinValue+0x72>
    13f6:	61 c0       	rjmp	.+194    	; 0x14ba <DIO_GetPinValue+0x134>
    13f8:	7f c0       	rjmp	.+254    	; 0x14f8 <DIO_GetPinValue+0x172>
		{
		case PORTA_Num:
			*Pin_Val=GET_BIT(PINA, PIN_Num);
    13fa:	e9 e3       	ldi	r30, 0x39	; 57
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <DIO_GetPinValue+0x8e>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	2a 95       	dec	r18
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <DIO_GetPinValue+0x8a>
    1418:	9a 01       	movw	r18, r20
    141a:	28 23       	and	r18, r24
    141c:	39 23       	and	r19, r25
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a9 01       	movw	r20, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_GetPinValue+0xa6>
    1428:	55 95       	asr	r21
    142a:	47 95       	ror	r20
    142c:	8a 95       	dec	r24
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_GetPinValue+0xa2>
    1430:	ca 01       	movw	r24, r20
    1432:	ec 81       	ldd	r30, Y+4	; 0x04
    1434:	fd 81       	ldd	r31, Y+5	; 0x05
    1436:	80 83       	st	Z, r24
    1438:	5f c0       	rjmp	.+190    	; 0x14f8 <DIO_GetPinValue+0x172>
			break;
		case PORTB_Num:
			*Pin_Val=GET_BIT(PINB, PIN_Num);
    143a:	e6 e3       	ldi	r30, 0x36	; 54
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_GetPinValue+0xce>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	2a 95       	dec	r18
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_GetPinValue+0xca>
    1458:	9a 01       	movw	r18, r20
    145a:	28 23       	and	r18, r24
    145c:	39 23       	and	r19, r25
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a9 01       	movw	r20, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_GetPinValue+0xe6>
    1468:	55 95       	asr	r21
    146a:	47 95       	ror	r20
    146c:	8a 95       	dec	r24
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_GetPinValue+0xe2>
    1470:	ca 01       	movw	r24, r20
    1472:	ec 81       	ldd	r30, Y+4	; 0x04
    1474:	fd 81       	ldd	r31, Y+5	; 0x05
    1476:	80 83       	st	Z, r24
    1478:	3f c0       	rjmp	.+126    	; 0x14f8 <DIO_GetPinValue+0x172>
			break;
		case PORTC_Num:
			*Pin_Val=GET_BIT(PINC, PIN_Num);
    147a:	e3 e3       	ldi	r30, 0x33	; 51
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <DIO_GetPinValue+0x10e>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	2a 95       	dec	r18
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <DIO_GetPinValue+0x10a>
    1498:	9a 01       	movw	r18, r20
    149a:	28 23       	and	r18, r24
    149c:	39 23       	and	r19, r25
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a9 01       	movw	r20, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_GetPinValue+0x126>
    14a8:	55 95       	asr	r21
    14aa:	47 95       	ror	r20
    14ac:	8a 95       	dec	r24
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_GetPinValue+0x122>
    14b0:	ca 01       	movw	r24, r20
    14b2:	ec 81       	ldd	r30, Y+4	; 0x04
    14b4:	fd 81       	ldd	r31, Y+5	; 0x05
    14b6:	80 83       	st	Z, r24
    14b8:	1f c0       	rjmp	.+62     	; 0x14f8 <DIO_GetPinValue+0x172>
			break;
		case PORTD_Num:
			*Pin_Val=GET_BIT(PIND, PIN_Num);
    14ba:	e0 e3       	ldi	r30, 0x30	; 48
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_GetPinValue+0x14e>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	2a 95       	dec	r18
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_GetPinValue+0x14a>
    14d8:	9a 01       	movw	r18, r20
    14da:	28 23       	and	r18, r24
    14dc:	39 23       	and	r19, r25
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a9 01       	movw	r20, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_GetPinValue+0x166>
    14e8:	55 95       	asr	r21
    14ea:	47 95       	ror	r20
    14ec:	8a 95       	dec	r24
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_GetPinValue+0x162>
    14f0:	ca 01       	movw	r24, r20
    14f2:	ec 81       	ldd	r30, Y+4	; 0x04
    14f4:	fd 81       	ldd	r31, Y+5	; 0x05
    14f6:	80 83       	st	Z, r24
			break;
		}
	}
	return Func_Stat4;
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fa:	27 96       	adiw	r28, 0x07	; 7
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <DIO_GetPortValue>:
u8 DIO_GetPortValue(u8 PORT_Num, u8*Port_Val)
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	00 d0       	rcall	.+0      	; 0x1512 <DIO_GetPortValue+0x6>
    1512:	00 d0       	rcall	.+0      	; 0x1514 <DIO_GetPortValue+0x8>
    1514:	00 d0       	rcall	.+0      	; 0x1516 <DIO_GetPortValue+0xa>
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	8a 83       	std	Y+2, r24	; 0x02
    151c:	7c 83       	std	Y+4, r23	; 0x04
    151e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Func_Stat5 = OK;
    1520:	19 82       	std	Y+1, r1	; 0x01
	if((PORT_Num > PORTD_Num))
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	84 30       	cpi	r24, 0x04	; 4
    1526:	18 f0       	brcs	.+6      	; 0x152e <DIO_GetPortValue+0x22>
	{
		Func_Stat5=NOK;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	3a c0       	rjmp	.+116    	; 0x15a2 <DIO_GetPortValue+0x96>
	}
	else
	{
		switch(PORT_Num)
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3e 83       	std	Y+6, r19	; 0x06
    1536:	2d 83       	std	Y+5, r18	; 0x05
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	91 05       	cpc	r25, r1
    1540:	e1 f0       	breq	.+56     	; 0x157a <DIO_GetPortValue+0x6e>
    1542:	2d 81       	ldd	r18, Y+5	; 0x05
    1544:	3e 81       	ldd	r19, Y+6	; 0x06
    1546:	22 30       	cpi	r18, 0x02	; 2
    1548:	31 05       	cpc	r19, r1
    154a:	2c f4       	brge	.+10     	; 0x1556 <DIO_GetPortValue+0x4a>
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	61 f0       	breq	.+24     	; 0x156c <DIO_GetPortValue+0x60>
    1554:	26 c0       	rjmp	.+76     	; 0x15a2 <DIO_GetPortValue+0x96>
    1556:	2d 81       	ldd	r18, Y+5	; 0x05
    1558:	3e 81       	ldd	r19, Y+6	; 0x06
    155a:	22 30       	cpi	r18, 0x02	; 2
    155c:	31 05       	cpc	r19, r1
    155e:	a1 f0       	breq	.+40     	; 0x1588 <DIO_GetPortValue+0x7c>
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	9e 81       	ldd	r25, Y+6	; 0x06
    1564:	83 30       	cpi	r24, 0x03	; 3
    1566:	91 05       	cpc	r25, r1
    1568:	b1 f0       	breq	.+44     	; 0x1596 <DIO_GetPortValue+0x8a>
    156a:	1b c0       	rjmp	.+54     	; 0x15a2 <DIO_GetPortValue+0x96>
		{
		case PORTA_Num:
			*Port_Val=PINA;
    156c:	e9 e3       	ldi	r30, 0x39	; 57
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	eb 81       	ldd	r30, Y+3	; 0x03
    1574:	fc 81       	ldd	r31, Y+4	; 0x04
    1576:	80 83       	st	Z, r24
    1578:	14 c0       	rjmp	.+40     	; 0x15a2 <DIO_GetPortValue+0x96>
			break;
		case PORTB_Num:
			*Port_Val=PINB;
    157a:	e6 e3       	ldi	r30, 0x36	; 54
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	eb 81       	ldd	r30, Y+3	; 0x03
    1582:	fc 81       	ldd	r31, Y+4	; 0x04
    1584:	80 83       	st	Z, r24
    1586:	0d c0       	rjmp	.+26     	; 0x15a2 <DIO_GetPortValue+0x96>
			break;
		case PORTC_Num:
			*Port_Val=PINC;
    1588:	e3 e3       	ldi	r30, 0x33	; 51
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	eb 81       	ldd	r30, Y+3	; 0x03
    1590:	fc 81       	ldd	r31, Y+4	; 0x04
    1592:	80 83       	st	Z, r24
    1594:	06 c0       	rjmp	.+12     	; 0x15a2 <DIO_GetPortValue+0x96>
			break;
		case PORTD_Num:
			*Port_Val=PIND;
    1596:	e0 e3       	ldi	r30, 0x30	; 48
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	eb 81       	ldd	r30, Y+3	; 0x03
    159e:	fc 81       	ldd	r31, Y+4	; 0x04
    15a0:	80 83       	st	Z, r24
			break;
		}
	}
	return Func_Stat5;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a4:	26 96       	adiw	r28, 0x06	; 6
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <write_low_nibble>:
void write_low_nibble(unsigned char portname,unsigned char value)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <write_low_nibble+0x6>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <write_low_nibble+0x8>
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	8f 70       	andi	r24, 0x0F	; 15
    15ca:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	3c 83       	std	Y+4, r19	; 0x04
    15d4:	2b 83       	std	Y+3, r18	; 0x03
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	91 05       	cpc	r25, r1
    15de:	21 f1       	breq	.+72     	; 0x1628 <write_low_nibble+0x72>
    15e0:	2b 81       	ldd	r18, Y+3	; 0x03
    15e2:	3c 81       	ldd	r19, Y+4	; 0x04
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <write_low_nibble+0x3e>
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	9c 81       	ldd	r25, Y+4	; 0x04
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	61 f0       	breq	.+24     	; 0x160a <write_low_nibble+0x54>
    15f2:	47 c0       	rjmp	.+142    	; 0x1682 <write_low_nibble+0xcc>
    15f4:	2b 81       	ldd	r18, Y+3	; 0x03
    15f6:	3c 81       	ldd	r19, Y+4	; 0x04
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	21 f1       	breq	.+72     	; 0x1646 <write_low_nibble+0x90>
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	91 05       	cpc	r25, r1
    1606:	71 f1       	breq	.+92     	; 0x1664 <write_low_nibble+0xae>
    1608:	3c c0       	rjmp	.+120    	; 0x1682 <write_low_nibble+0xcc>
	{
		case 0:
		PORTA&=0xf0;
    160a:	ab e3       	ldi	r26, 0x3B	; 59
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	eb e3       	ldi	r30, 0x3B	; 59
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	80 7f       	andi	r24, 0xF0	; 240
    1616:	8c 93       	st	X, r24
		PORTA|=value;
    1618:	ab e3       	ldi	r26, 0x3B	; 59
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	eb e3       	ldi	r30, 0x3B	; 59
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	90 81       	ld	r25, Z
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	89 2b       	or	r24, r25
    1626:	8c 93       	st	X, r24
		case 1:
		PORTB&=0xf0;
    1628:	a8 e3       	ldi	r26, 0x38	; 56
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e8 e3       	ldi	r30, 0x38	; 56
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	80 7f       	andi	r24, 0xF0	; 240
    1634:	8c 93       	st	X, r24
		PORTB|=value;
    1636:	a8 e3       	ldi	r26, 0x38	; 56
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e8 e3       	ldi	r30, 0x38	; 56
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	90 81       	ld	r25, Z
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	89 2b       	or	r24, r25
    1644:	8c 93       	st	X, r24
		case 2:
		PORTC&=0xf0;
    1646:	a5 e3       	ldi	r26, 0x35	; 53
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e5 e3       	ldi	r30, 0x35	; 53
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	80 7f       	andi	r24, 0xF0	; 240
    1652:	8c 93       	st	X, r24
		PORTC|=value;
    1654:	a5 e3       	ldi	r26, 0x35	; 53
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e5 e3       	ldi	r30, 0x35	; 53
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	90 81       	ld	r25, Z
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	89 2b       	or	r24, r25
    1662:	8c 93       	st	X, r24
		case 3:
		PORTD&=0xf0;
    1664:	a2 e3       	ldi	r26, 0x32	; 50
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e2 e3       	ldi	r30, 0x32	; 50
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	80 7f       	andi	r24, 0xF0	; 240
    1670:	8c 93       	st	X, r24
		PORTD|=value;
    1672:	a2 e3       	ldi	r26, 0x32	; 50
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e2 e3       	ldi	r30, 0x32	; 50
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	90 81       	ld	r25, Z
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	89 2b       	or	r24, r25
    1680:	8c 93       	st	X, r24
	}
}
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <write_high_nibble>:

void write_high_nibble(unsigned char portname,unsigned char value)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	00 d0       	rcall	.+0      	; 0x1696 <write_high_nibble+0x6>
    1696:	00 d0       	rcall	.+0      	; 0x1698 <write_high_nibble+0x8>
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	82 95       	swap	r24
    16a4:	80 7f       	andi	r24, 0xF0	; 240
    16a6:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	3c 83       	std	Y+4, r19	; 0x04
    16b0:	2b 83       	std	Y+3, r18	; 0x03
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	91 05       	cpc	r25, r1
    16ba:	21 f1       	breq	.+72     	; 0x1704 <write_high_nibble+0x74>
    16bc:	2b 81       	ldd	r18, Y+3	; 0x03
    16be:	3c 81       	ldd	r19, Y+4	; 0x04
    16c0:	22 30       	cpi	r18, 0x02	; 2
    16c2:	31 05       	cpc	r19, r1
    16c4:	2c f4       	brge	.+10     	; 0x16d0 <write_high_nibble+0x40>
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	61 f0       	breq	.+24     	; 0x16e6 <write_high_nibble+0x56>
    16ce:	47 c0       	rjmp	.+142    	; 0x175e <write_high_nibble+0xce>
    16d0:	2b 81       	ldd	r18, Y+3	; 0x03
    16d2:	3c 81       	ldd	r19, Y+4	; 0x04
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	21 f1       	breq	.+72     	; 0x1722 <write_high_nibble+0x92>
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	83 30       	cpi	r24, 0x03	; 3
    16e0:	91 05       	cpc	r25, r1
    16e2:	71 f1       	breq	.+92     	; 0x1740 <write_high_nibble+0xb0>
    16e4:	3c c0       	rjmp	.+120    	; 0x175e <write_high_nibble+0xce>
	{
		case 0:
		PORTA&=0x0f;
    16e6:	ab e3       	ldi	r26, 0x3B	; 59
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	eb e3       	ldi	r30, 0x3B	; 59
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	8f 70       	andi	r24, 0x0F	; 15
    16f2:	8c 93       	st	X, r24
		PORTA|=value;
    16f4:	ab e3       	ldi	r26, 0x3B	; 59
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	eb e3       	ldi	r30, 0x3B	; 59
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	90 81       	ld	r25, Z
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	89 2b       	or	r24, r25
    1702:	8c 93       	st	X, r24
		case 1:
		PORTB&=0x0f;
    1704:	a8 e3       	ldi	r26, 0x38	; 56
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e8 e3       	ldi	r30, 0x38	; 56
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8f 70       	andi	r24, 0x0F	; 15
    1710:	8c 93       	st	X, r24
		PORTB|=value;
    1712:	a8 e3       	ldi	r26, 0x38	; 56
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e8 e3       	ldi	r30, 0x38	; 56
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	90 81       	ld	r25, Z
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	89 2b       	or	r24, r25
    1720:	8c 93       	st	X, r24
		case 2:
		PORTC&=0x0f;
    1722:	a5 e3       	ldi	r26, 0x35	; 53
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e5 e3       	ldi	r30, 0x35	; 53
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	8f 70       	andi	r24, 0x0F	; 15
    172e:	8c 93       	st	X, r24
		PORTC|=value;
    1730:	a5 e3       	ldi	r26, 0x35	; 53
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e5 e3       	ldi	r30, 0x35	; 53
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	90 81       	ld	r25, Z
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	89 2b       	or	r24, r25
    173e:	8c 93       	st	X, r24
		case 3:
		PORTD&=0x0f;
    1740:	a2 e3       	ldi	r26, 0x32	; 50
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e2 e3       	ldi	r30, 0x32	; 50
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	8f 70       	andi	r24, 0x0F	; 15
    174c:	8c 93       	st	X, r24
		PORTD|=value;
    174e:	a2 e3       	ldi	r26, 0x32	; 50
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e2 e3       	ldi	r30, 0x32	; 50
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	90 81       	ld	r25, Z
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	89 2b       	or	r24, r25
    175c:	8c 93       	st	X, r24
	}
}
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <I2C_INT>:
#include "DIO.h"
#include "I2C.h"


void I2C_INT(void)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	TWBR=2;//
    1774:	e0 e2       	ldi	r30, 0x20	; 32
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	82 e0       	ldi	r24, 0x02	; 2
    177a:	80 83       	st	Z, r24


	SET_BIT(TWCR,2);//Enable bit
    177c:	a6 e5       	ldi	r26, 0x56	; 86
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e6 e5       	ldi	r30, 0x56	; 86
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	84 60       	ori	r24, 0x04	; 4
    1788:	8c 93       	st	X, r24

	CLR_BIT(TWSR,0);//prescaler =1
    178a:	a1 e2       	ldi	r26, 0x21	; 33
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e1 e2       	ldi	r30, 0x21	; 33
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8e 7f       	andi	r24, 0xFE	; 254
    1796:	8c 93       	st	X, r24
	CLR_BIT(TWSR,1);
    1798:	a1 e2       	ldi	r26, 0x21	; 33
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e1 e2       	ldi	r30, 0x21	; 33
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8d 7f       	andi	r24, 0xFD	; 253
    17a4:	8c 93       	st	X, r24

	TWAR &=1;//my address
    17a6:	a2 e2       	ldi	r26, 0x22	; 34
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e2 e2       	ldi	r30, 0x22	; 34
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	81 70       	andi	r24, 0x01	; 1
    17b2:	8c 93       	st	X, r24
	TWAR |=1<<TWGCE;
    17b4:	a2 e2       	ldi	r26, 0x22	; 34
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e2 e2       	ldi	r30, 0x22	; 34
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	81 60       	ori	r24, 0x01	; 1
    17c0:	8c 93       	st	X, r24

}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <I2C_Start_Condition>:
u8 I2C_Start_Condition(void)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	0f 92       	push	r0
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
	u8 status=OK;
    17d2:	19 82       	std	Y+1, r1	; 0x01

	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);// start condition
    17d4:	e6 e5       	ldi	r30, 0x56	; 86
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	84 ea       	ldi	r24, 0xA4	; 164
    17da:	80 83       	st	Z, r24
	while(GET_BIT(TWCR,TWINT)==0);//check interrupt flag
    17dc:	e6 e5       	ldi	r30, 0x56	; 86
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	88 1f       	adc	r24, r24
    17e4:	88 27       	eor	r24, r24
    17e6:	88 1f       	adc	r24, r24
    17e8:	88 2f       	mov	r24, r24
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	90 70       	andi	r25, 0x00	; 0
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	a9 f3       	breq	.-22     	; 0x17dc <I2C_Start_Condition+0x14>
	if((TWSR&0b11111000)!=0x08)
    17f2:	e1 e2       	ldi	r30, 0x21	; 33
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	88 7f       	andi	r24, 0xF8	; 248
    17fe:	90 70       	andi	r25, 0x00	; 0
    1800:	88 30       	cpi	r24, 0x08	; 8
    1802:	91 05       	cpc	r25, r1
    1804:	11 f0       	breq	.+4      	; 0x180a <I2C_Start_Condition+0x42>
	{
		status= NOK;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	89 83       	std	Y+1, r24	; 0x01
	}
	return status;
    180a:	89 81       	ldd	r24, Y+1	; 0x01
}
    180c:	0f 90       	pop	r0
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <I2C_Stop_Condition>:
void I2C_Stop_Condition(void)
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
	TWCR= (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//stop condition
    181c:	e6 e5       	ldi	r30, 0x56	; 86
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	84 e9       	ldi	r24, 0x94	; 148
    1822:	80 83       	st	Z, r24

}
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <I2C_Writing>:

void I2C_Writing(u8 data)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	0f 92       	push	r0
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	89 83       	std	Y+1, r24	; 0x01

	TWDR = data;// Put data On TWI Register
    1836:	e3 e2       	ldi	r30, 0x23	; 35
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	80 83       	st	Z, r24
	// Send Data
	TWCR = (1 << TWINT) | (1 << TWEN);// Wait for TWINT flag set in TWCR Register set it 1
    183e:	e6 e5       	ldi	r30, 0x56	; 86
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	84 e8       	ldi	r24, 0x84	; 132
    1844:	80 83       	st	Z, r24

	while(GET_BIT(TWCR,TWINT)==0);//check interrupt flag
    1846:	e6 e5       	ldi	r30, 0x56	; 86
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	88 1f       	adc	r24, r24
    184e:	88 27       	eor	r24, r24
    1850:	88 1f       	adc	r24, r24
    1852:	88 2f       	mov	r24, r24
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	90 70       	andi	r25, 0x00	; 0
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	a9 f3       	breq	.-22     	; 0x1846 <I2C_Writing+0x1c>

}
    185c:	0f 90       	pop	r0
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <I2C_Reading_ACK>:

u8 I2C_Reading_ACK(void)
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWEA);//clear flag & enaple ack
    186c:	e6 e5       	ldi	r30, 0x56	; 86
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	84 ec       	ldi	r24, 0xC4	; 196
    1872:	80 83       	st	Z, r24
	while(GET_BIT(TWCR,TWINT)==0);//check interrupt flag
    1874:	e6 e5       	ldi	r30, 0x56	; 86
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	88 1f       	adc	r24, r24
    187c:	88 27       	eor	r24, r24
    187e:	88 1f       	adc	r24, r24
    1880:	88 2f       	mov	r24, r24
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	90 70       	andi	r25, 0x00	; 0
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	a9 f3       	breq	.-22     	; 0x1874 <I2C_Reading_ACK+0x10>
	return TWDR;
    188a:	e3 e2       	ldi	r30, 0x23	; 35
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
}
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <I2C_Reading_NOT_ACK>:

u8 I2C_Reading_NOT_ACK(void)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
	TWCR= (1<<TWINT)|(1<<TWEN);//clear flag & enaple ack
    189e:	e6 e5       	ldi	r30, 0x56	; 86
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	84 e8       	ldi	r24, 0x84	; 132
    18a4:	80 83       	st	Z, r24
	while(GET_BIT(TWCR,TWINT)==0);//check interrupt flag
    18a6:	e6 e5       	ldi	r30, 0x56	; 86
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	88 1f       	adc	r24, r24
    18ae:	88 27       	eor	r24, r24
    18b0:	88 1f       	adc	r24, r24
    18b2:	88 2f       	mov	r24, r24
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	90 70       	andi	r25, 0x00	; 0
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	a9 f3       	breq	.-22     	; 0x18a6 <I2C_Reading_NOT_ACK+0x10>
	return TWDR;
    18bc:	e3 e2       	ldi	r30, 0x23	; 35
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
}
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <tw_start>:
static ret_code_t tw_start(void)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <tw_start+0x6>
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
	/* Send START condition */
#if DEBUG_LOG
	// printf(BG "Send START condition..." RESET);
#endif
	TWCR =  (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
    18d2:	e6 e5       	ldi	r30, 0x56	; 86
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	84 ea       	ldi	r24, 0xA4	; 164
    18d8:	80 83       	st	Z, r24

	/* Wait for TWINT flag to set */
	while (!(TWCR & (1 << TWINT)));
    18da:	e6 e5       	ldi	r30, 0x56	; 86
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	88 23       	and	r24, r24
    18e2:	dc f7       	brge	.-10     	; 0x18da <tw_start+0x12>

	/* Check error */
	if (TW_STATUS != TW_START && TW_STATUS != TW_REP_START)
    18e4:	e1 e2       	ldi	r30, 0x21	; 33
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	88 7f       	andi	r24, 0xF8	; 248
    18f0:	90 70       	andi	r25, 0x00	; 0
    18f2:	88 30       	cpi	r24, 0x08	; 8
    18f4:	91 05       	cpc	r25, r1
    18f6:	a9 f0       	breq	.+42     	; 0x1922 <tw_start+0x5a>
    18f8:	e1 e2       	ldi	r30, 0x21	; 33
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	88 7f       	andi	r24, 0xF8	; 248
    1904:	90 70       	andi	r25, 0x00	; 0
    1906:	80 31       	cpi	r24, 0x10	; 16
    1908:	91 05       	cpc	r25, r1
    190a:	59 f0       	breq	.+22     	; 0x1922 <tw_start+0x5a>
	{
#if DEBUG_LOG
		// printf("\n");
#endif
		return TW_STATUS;
    190c:	e1 e2       	ldi	r30, 0x21	; 33
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9c 01       	movw	r18, r24
    1918:	28 7f       	andi	r18, 0xF8	; 248
    191a:	30 70       	andi	r19, 0x00	; 0
    191c:	3a 83       	std	Y+2, r19	; 0x02
    191e:	29 83       	std	Y+1, r18	; 0x01
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <tw_start+0x5e>
	}

#if DEBUG_LOG
	// printf("SUCCESS\n");
#endif
	return SUCCESS;
    1922:	1a 82       	std	Y+2, r1	; 0x02
    1924:	19 82       	std	Y+1, r1	; 0x01
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	9a 81       	ldd	r25, Y+2	; 0x02
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <tw_stop>:


static void tw_stop(void)
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
	/* Send STOP condition */
#if DEBUG_LOG
	// puts(BG "Send STOP condition." RESET);
#endif
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    193c:	e6 e5       	ldi	r30, 0x56	; 86
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	84 e9       	ldi	r24, 0x94	; 148
    1942:	80 83       	st	Z, r24
}
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <tw_write_sla>:


static ret_code_t tw_write_sla(uint8_t sla)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <tw_write_sla+0x6>
    1950:	0f 92       	push	r0
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	89 83       	std	Y+1, r24	; 0x01
	/* Transmit slave address with read/write flag */
#if DEBUG_LOG
	// printf(BG "Write SLA + R/W: 0x%02X..." RESET, sla);
#endif
	TWDR = sla;
    1958:	e3 e2       	ldi	r30, 0x23	; 35
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	80 83       	st	Z, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
    1960:	e6 e5       	ldi	r30, 0x56	; 86
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	84 e8       	ldi	r24, 0x84	; 132
    1966:	80 83       	st	Z, r24
	
	/* Wait for TWINT flag to set */
	while (!(TWCR & (1 << TWINT)));
    1968:	e6 e5       	ldi	r30, 0x56	; 86
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	88 23       	and	r24, r24
    1970:	dc f7       	brge	.-10     	; 0x1968 <tw_write_sla+0x1e>
	if (TW_STATUS != TW_MT_SLA_ACK && TW_STATUS != TW_MR_SLA_ACK)
    1972:	e1 e2       	ldi	r30, 0x21	; 33
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	88 2f       	mov	r24, r24
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	88 7f       	andi	r24, 0xF8	; 248
    197e:	90 70       	andi	r25, 0x00	; 0
    1980:	88 31       	cpi	r24, 0x18	; 24
    1982:	91 05       	cpc	r25, r1
    1984:	a9 f0       	breq	.+42     	; 0x19b0 <tw_write_sla+0x66>
    1986:	e1 e2       	ldi	r30, 0x21	; 33
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	88 7f       	andi	r24, 0xF8	; 248
    1992:	90 70       	andi	r25, 0x00	; 0
    1994:	80 34       	cpi	r24, 0x40	; 64
    1996:	91 05       	cpc	r25, r1
    1998:	59 f0       	breq	.+22     	; 0x19b0 <tw_write_sla+0x66>
	{
#if DEBUG_LOG
		// printf("\n");
#endif
		return TW_STATUS;
    199a:	e1 e2       	ldi	r30, 0x21	; 33
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9c 01       	movw	r18, r24
    19a6:	28 7f       	andi	r18, 0xF8	; 248
    19a8:	30 70       	andi	r19, 0x00	; 0
    19aa:	3b 83       	std	Y+3, r19	; 0x03
    19ac:	2a 83       	std	Y+2, r18	; 0x02
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <tw_write_sla+0x6a>
	}

#if DEBUG_LOG
	// printf("SUCCESS\n");
#endif
	return SUCCESS;
    19b0:	1b 82       	std	Y+3, r1	; 0x03
    19b2:	1a 82       	std	Y+2, r1	; 0x02
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	9b 81       	ldd	r25, Y+3	; 0x03
}
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <tw_write>:


static ret_code_t tw_write(uint8_t data)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <tw_write+0x6>
    19ca:	0f 92       	push	r0
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	89 83       	std	Y+1, r24	; 0x01
	/* Transmit 1 byte*/
#if DEBUG_LOG
	// printf(BG "Write data byte: 0x%02X..." RESET, data);
#endif
	TWDR = data;
    19d2:	e3 e2       	ldi	r30, 0x23	; 35
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	80 83       	st	Z, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
    19da:	e6 e5       	ldi	r30, 0x56	; 86
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	84 e8       	ldi	r24, 0x84	; 132
    19e0:	80 83       	st	Z, r24

	/* Wait for TWINT flag to set */
	while (!(TWCR & (1 << TWINT)));
    19e2:	e6 e5       	ldi	r30, 0x56	; 86
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	88 23       	and	r24, r24
    19ea:	dc f7       	brge	.-10     	; 0x19e2 <tw_write+0x1e>
	if (TW_STATUS != TW_MT_DATA_ACK)
    19ec:	e1 e2       	ldi	r30, 0x21	; 33
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	88 7f       	andi	r24, 0xF8	; 248
    19f8:	90 70       	andi	r25, 0x00	; 0
    19fa:	88 32       	cpi	r24, 0x28	; 40
    19fc:	91 05       	cpc	r25, r1
    19fe:	59 f0       	breq	.+22     	; 0x1a16 <tw_write+0x52>
	{
#if DEBUG_LOG
		// printf("\n");
#endif
		return TW_STATUS;
    1a00:	e1 e2       	ldi	r30, 0x21	; 33
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	88 2f       	mov	r24, r24
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9c 01       	movw	r18, r24
    1a0c:	28 7f       	andi	r18, 0xF8	; 248
    1a0e:	30 70       	andi	r19, 0x00	; 0
    1a10:	3b 83       	std	Y+3, r19	; 0x03
    1a12:	2a 83       	std	Y+2, r18	; 0x02
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <tw_write+0x56>
	}

#if DEBUG_LOG
	// printf("SUCCESS\n");
#endif
	return SUCCESS;
    1a16:	1b 82       	std	Y+3, r1	; 0x03
    1a18:	1a 82       	std	Y+2, r1	; 0x02
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <tw_read>:


static uint8_t tw_read(bool read_ack)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <tw_read+0x6>
    1a30:	0f 92       	push	r0
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	8a 83       	std	Y+2, r24	; 0x02
	if (read_ack)
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	88 23       	and	r24, r24
    1a3c:	d1 f0       	breq	.+52     	; 0x1a72 <tw_read+0x48>
	{
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1a3e:	e6 e5       	ldi	r30, 0x56	; 86
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	84 ec       	ldi	r24, 0xC4	; 196
    1a44:	80 83       	st	Z, r24
		while (!(TWCR & (1 << TWINT)));
    1a46:	e6 e5       	ldi	r30, 0x56	; 86
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	88 23       	and	r24, r24
    1a4e:	dc f7       	brge	.-10     	; 0x1a46 <tw_read+0x1c>
		if (TW_STATUS != TW_MR_DATA_ACK)
    1a50:	e1 e2       	ldi	r30, 0x21	; 33
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	88 2f       	mov	r24, r24
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	88 7f       	andi	r24, 0xF8	; 248
    1a5c:	90 70       	andi	r25, 0x00	; 0
    1a5e:	80 35       	cpi	r24, 0x50	; 80
    1a60:	91 05       	cpc	r25, r1
    1a62:	09 f1       	breq	.+66     	; 0x1aa6 <tw_read+0x7c>
		{
			return TW_STATUS;
    1a64:	e1 e2       	ldi	r30, 0x21	; 33
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	98 2f       	mov	r25, r24
    1a6c:	98 7f       	andi	r25, 0xF8	; 248
    1a6e:	9b 83       	std	Y+3, r25	; 0x03
    1a70:	20 c0       	rjmp	.+64     	; 0x1ab2 <tw_read+0x88>
		}
	}
	else
	{
		TWCR = (1 << TWINT) | (1 << TWEN);
    1a72:	e6 e5       	ldi	r30, 0x56	; 86
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	84 e8       	ldi	r24, 0x84	; 132
    1a78:	80 83       	st	Z, r24
		while (!(TWCR & (1 << TWINT)));
    1a7a:	e6 e5       	ldi	r30, 0x56	; 86
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	88 23       	and	r24, r24
    1a82:	dc f7       	brge	.-10     	; 0x1a7a <tw_read+0x50>
		if (TW_STATUS != TW_MR_DATA_NACK)
    1a84:	e1 e2       	ldi	r30, 0x21	; 33
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	88 2f       	mov	r24, r24
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	88 7f       	andi	r24, 0xF8	; 248
    1a90:	90 70       	andi	r25, 0x00	; 0
    1a92:	88 35       	cpi	r24, 0x58	; 88
    1a94:	91 05       	cpc	r25, r1
    1a96:	39 f0       	breq	.+14     	; 0x1aa6 <tw_read+0x7c>
		{
			return TW_STATUS;
    1a98:	e1 e2       	ldi	r30, 0x21	; 33
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	98 2f       	mov	r25, r24
    1aa0:	98 7f       	andi	r25, 0xF8	; 248
    1aa2:	9b 83       	std	Y+3, r25	; 0x03
    1aa4:	06 c0       	rjmp	.+12     	; 0x1ab2 <tw_read+0x88>
		}
	}
	uint8_t data = TWDR;
    1aa6:	e3 e2       	ldi	r30, 0x23	; 35
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	89 83       	std	Y+1, r24	; 0x01
#if DEBUG_LOG
	// printf(BG "Read data byte: 0x%02X\n" RESET, data);
#endif
	return data;
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	8b 83       	std	Y+3, r24	; 0x03
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <tw_init>:


void tw_init(twi_freq_mode_t twi_freq_mode, bool pullup_en)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <tw_init+0x6>
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <tw_init+0x8>
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	6a 83       	std	Y+2, r22	; 0x02
	DDRC  |= (1 << TW_SDA_PIN) | (1 << TW_SCL_PIN);
    1ad0:	a4 e3       	ldi	r26, 0x34	; 52
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e4 e3       	ldi	r30, 0x34	; 52
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	80 63       	ori	r24, 0x30	; 48
    1adc:	8c 93       	st	X, r24
	if (pullup_en)
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	88 23       	and	r24, r24
    1ae2:	41 f0       	breq	.+16     	; 0x1af4 <tw_init+0x34>
	{
#if DEBUG_LOG
		// puts(BG "Enable pull-up resistor." RESET);
#endif
		PORTC |= (1 << TW_SDA_PIN) | (1 << TW_SCL_PIN);
    1ae4:	a5 e3       	ldi	r26, 0x35	; 53
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e5 e3       	ldi	r30, 0x35	; 53
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	80 63       	ori	r24, 0x30	; 48
    1af0:	8c 93       	st	X, r24
    1af2:	07 c0       	rjmp	.+14     	; 0x1b02 <tw_init+0x42>
	}
	else
	{
		PORTC &= ~((1 << TW_SDA_PIN) | (1 << TW_SCL_PIN));
    1af4:	a5 e3       	ldi	r26, 0x35	; 53
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e5 e3       	ldi	r30, 0x35	; 53
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	8f 7c       	andi	r24, 0xCF	; 207
    1b00:	8c 93       	st	X, r24
	}
	DDRC  &= ~((1 << TW_SDA_PIN) | (1 << TW_SCL_PIN));
    1b02:	a4 e3       	ldi	r26, 0x34	; 52
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e4 e3       	ldi	r30, 0x34	; 52
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	8f 7c       	andi	r24, 0xCF	; 207
    1b0e:	8c 93       	st	X, r24

	switch (twi_freq_mode)
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	3c 83       	std	Y+4, r19	; 0x04
    1b18:	2b 83       	std	Y+3, r18	; 0x03
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1e:	81 30       	cpi	r24, 0x01	; 1
    1b20:	91 05       	cpc	r25, r1
    1b22:	71 f0       	breq	.+28     	; 0x1b40 <tw_init+0x80>
    1b24:	2b 81       	ldd	r18, Y+3	; 0x03
    1b26:	3c 81       	ldd	r19, Y+4	; 0x04
    1b28:	22 30       	cpi	r18, 0x02	; 2
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	71 f0       	breq	.+28     	; 0x1b4a <tw_init+0x8a>
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	71 f4       	brne	.+28     	; 0x1b52 <tw_init+0x92>
	{
		case TW_FREQ_100K:
		/* Set bit rate register 72 and prescaler to 1 resulting in
		SCL_freq = 16MHz/(16 + 2*72*1) = 100KHz	*/
		TWBR = 72;
    1b36:	e0 e2       	ldi	r30, 0x20	; 32
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	88 e4       	ldi	r24, 0x48	; 72
    1b3c:	80 83       	st	Z, r24
    1b3e:	09 c0       	rjmp	.+18     	; 0x1b52 <tw_init+0x92>
		break;

		case TW_FREQ_250K:
		/* Set bit rate register 24 and prescaler to 1 resulting in
		SCL_freq = 16MHz/(16 + 2*24*1) = 250KHz	*/
		TWBR = 24;
    1b40:	e0 e2       	ldi	r30, 0x20	; 32
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	88 e1       	ldi	r24, 0x18	; 24
    1b46:	80 83       	st	Z, r24
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <tw_init+0x92>
		break;

		case TW_FREQ_400K:
		/* Set bit rate register 12 and prescaler to 1 resulting in
		SCL_freq = 16MHz/(16 + 2*12*1) = 400KHz	*/
		TWBR = 12;
    1b4a:	e0 e2       	ldi	r30, 0x20	; 32
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	8c e0       	ldi	r24, 0x0C	; 12
    1b50:	80 83       	st	Z, r24
		break;

		default: break;
	}
}
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <tw_master_transmit>:


ret_code_t tw_master_transmit(u8 slave_addr, u8* p_data, u8 len, bool repeat_start)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	2b 97       	sbiw	r28, 0x0b	; 11
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	7f 83       	std	Y+7, r23	; 0x07
    1b78:	6e 83       	std	Y+6, r22	; 0x06
    1b7a:	48 87       	std	Y+8, r20	; 0x08
    1b7c:	29 87       	std	Y+9, r18	; 0x09
	ret_code_t error_code;
	
	/* Send START condition */
	error_code = tw_start();
    1b7e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <tw_start>
    1b82:	9c 83       	std	Y+4, r25	; 0x04
    1b84:	8b 83       	std	Y+3, r24	; 0x03
	if (error_code != SUCCESS)
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	29 f0       	breq	.+10     	; 0x1b98 <tw_master_transmit+0x38>
	{
		return error_code;
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	9b 87       	std	Y+11, r25	; 0x0b
    1b94:	8a 87       	std	Y+10, r24	; 0x0a
    1b96:	3d c0       	rjmp	.+122    	; 0x1c12 <tw_master_transmit+0xb2>
	}
	
	/* Send slave address with WRITE flag */
	error_code = tw_write_sla(TW_SLA_W(slave_addr));
    1b98:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9a:	88 0f       	add	r24, r24
    1b9c:	0e 94 a5 0c 	call	0x194a	; 0x194a <tw_write_sla>
    1ba0:	9c 83       	std	Y+4, r25	; 0x04
    1ba2:	8b 83       	std	Y+3, r24	; 0x03
	if (error_code != SUCCESS)
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	29 f0       	breq	.+10     	; 0x1bb6 <tw_master_transmit+0x56>
	{
		return error_code;
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	9b 87       	std	Y+11, r25	; 0x0b
    1bb2:	8a 87       	std	Y+10, r24	; 0x0a
    1bb4:	2e c0       	rjmp	.+92     	; 0x1c12 <tw_master_transmit+0xb2>
	}
	
	/* Send data byte in single or burst mode */
	for (int i = 0; i < len; ++i)
    1bb6:	1a 82       	std	Y+2, r1	; 0x02
    1bb8:	19 82       	std	Y+1, r1	; 0x01
    1bba:	1a c0       	rjmp	.+52     	; 0x1bf0 <tw_master_transmit+0x90>
	{
		error_code = tw_write(p_data[i]);
    1bbc:	29 81       	ldd	r18, Y+1	; 0x01
    1bbe:	3a 81       	ldd	r19, Y+2	; 0x02
    1bc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	e2 0f       	add	r30, r18
    1bc8:	f3 1f       	adc	r31, r19
    1bca:	80 81       	ld	r24, Z
    1bcc:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <tw_write>
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
		if (error_code != SUCCESS)
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	29 f0       	breq	.+10     	; 0x1be6 <tw_master_transmit+0x86>
		{
			return error_code;
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	9b 87       	std	Y+11, r25	; 0x0b
    1be2:	8a 87       	std	Y+10, r24	; 0x0a
    1be4:	16 c0       	rjmp	.+44     	; 0x1c12 <tw_master_transmit+0xb2>
	{
		return error_code;
	}
	
	/* Send data byte in single or burst mode */
	for (int i = 0; i < len; ++i)
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	88 85       	ldd	r24, Y+8	; 0x08
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfa:	82 17       	cp	r24, r18
    1bfc:	93 07       	cpc	r25, r19
    1bfe:	f4 f2       	brlt	.-68     	; 0x1bbc <tw_master_transmit+0x5c>
		{
			return error_code;
		}
	}
	
	if (!repeat_start)
    1c00:	89 85       	ldd	r24, Y+9	; 0x09
    1c02:	91 e0       	ldi	r25, 0x01	; 1
    1c04:	89 27       	eor	r24, r25
    1c06:	88 23       	and	r24, r24
    1c08:	11 f0       	breq	.+4      	; 0x1c0e <tw_master_transmit+0xae>
	{
		/* Send STOP condition */
		tw_stop();
    1c0a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <tw_stop>
	}
	
	return SUCCESS;
    1c0e:	1b 86       	std	Y+11, r1	; 0x0b
    1c10:	1a 86       	std	Y+10, r1	; 0x0a
    1c12:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c14:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    1c16:	2b 96       	adiw	r28, 0x0b	; 11
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <tw_master_receive>:


ret_code_t tw_master_receive(u8 slave_addr, u8* p_data, u8 len)
{
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	2a 97       	sbiw	r28, 0x0a	; 10
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	8d 83       	std	Y+5, r24	; 0x05
    1c42:	7f 83       	std	Y+7, r23	; 0x07
    1c44:	6e 83       	std	Y+6, r22	; 0x06
    1c46:	48 87       	std	Y+8, r20	; 0x08
	ret_code_t error_code;
	
	/* Send START condition */
	error_code = tw_start();
    1c48:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <tw_start>
    1c4c:	9c 83       	std	Y+4, r25	; 0x04
    1c4e:	8b 83       	std	Y+3, r24	; 0x03
	if (error_code != SUCCESS)
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	29 f0       	breq	.+10     	; 0x1c62 <tw_master_receive+0x3a>
	{
		return error_code;
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	9a 87       	std	Y+10, r25	; 0x0a
    1c5e:	89 87       	std	Y+9, r24	; 0x09
    1c60:	46 c0       	rjmp	.+140    	; 0x1cee <tw_master_receive+0xc6>
	}
	
	/* Write slave address with READ flag */
	error_code = tw_write_sla(TW_SLA_R(slave_addr));
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	88 2f       	mov	r24, r24
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	81 60       	ori	r24, 0x01	; 1
    1c6e:	0e 94 a5 0c 	call	0x194a	; 0x194a <tw_write_sla>
    1c72:	9c 83       	std	Y+4, r25	; 0x04
    1c74:	8b 83       	std	Y+3, r24	; 0x03
	if (error_code != SUCCESS)
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	29 f0       	breq	.+10     	; 0x1c88 <tw_master_receive+0x60>
	{
		return error_code;
    1c7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c80:	fc 81       	ldd	r31, Y+4	; 0x04
    1c82:	fa 87       	std	Y+10, r31	; 0x0a
    1c84:	e9 87       	std	Y+9, r30	; 0x09
    1c86:	33 c0       	rjmp	.+102    	; 0x1cee <tw_master_receive+0xc6>
	}
	
	/* Read single or multiple data byte and send ack */
	for (int i = 0; i < len-1; ++i)
    1c88:	1a 82       	std	Y+2, r1	; 0x02
    1c8a:	19 82       	std	Y+1, r1	; 0x01
    1c8c:	11 c0       	rjmp	.+34     	; 0x1cb0 <tw_master_receive+0x88>
	{
		p_data[i] = tw_read(TW_READ_ACK);
    1c8e:	29 81       	ldd	r18, Y+1	; 0x01
    1c90:	3a 81       	ldd	r19, Y+2	; 0x02
    1c92:	8e 81       	ldd	r24, Y+6	; 0x06
    1c94:	9f 81       	ldd	r25, Y+7	; 0x07
    1c96:	8c 01       	movw	r16, r24
    1c98:	02 0f       	add	r16, r18
    1c9a:	13 1f       	adc	r17, r19
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <tw_read>
    1ca2:	f8 01       	movw	r30, r16
    1ca4:	80 83       	st	Z, r24
	{
		return error_code;
	}
	
	/* Read single or multiple data byte and send ack */
	for (int i = 0; i < len-1; ++i)
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	9a 83       	std	Y+2, r25	; 0x02
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	88 85       	ldd	r24, Y+8	; 0x08
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	9c 01       	movw	r18, r24
    1cb8:	21 50       	subi	r18, 0x01	; 1
    1cba:	30 40       	sbci	r19, 0x00	; 0
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc0:	82 17       	cp	r24, r18
    1cc2:	93 07       	cpc	r25, r19
    1cc4:	24 f3       	brlt	.-56     	; 0x1c8e <tw_master_receive+0x66>
	{
		p_data[i] = tw_read(TW_READ_ACK);
	}
	p_data[len-1] = tw_read(TW_READ_NACK);
    1cc6:	88 85       	ldd	r24, Y+8	; 0x08
    1cc8:	88 2f       	mov	r24, r24
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9c 01       	movw	r18, r24
    1cce:	21 50       	subi	r18, 0x01	; 1
    1cd0:	30 40       	sbci	r19, 0x00	; 0
    1cd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd6:	8c 01       	movw	r16, r24
    1cd8:	02 0f       	add	r16, r18
    1cda:	13 1f       	adc	r17, r19
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <tw_read>
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	80 83       	st	Z, r24
	
	/* Send STOP condition */
	tw_stop();
    1ce6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <tw_stop>
	
	return SUCCESS;
    1cea:	1a 86       	std	Y+10, r1	; 0x0a
    1cec:	19 86       	std	Y+9, r1	; 0x09
    1cee:	89 85       	ldd	r24, Y+9	; 0x09
    1cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    1cf2:	2a 96       	adiw	r28, 0x0a	; 10
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	1f 91       	pop	r17
    1d04:	0f 91       	pop	r16
    1d06:	08 95       	ret

00001d08 <LCD_vInit>:
#ifdef LCD_TRACK_POS
u8 xpos = 0;
u8 ypos = 0;
#endif
void LCD_vInit(void)
{
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	c4 55       	subi	r28, 0x54	; 84
    1d16:	d0 40       	sbci	r29, 0x00	; 0
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	fe 01       	movw	r30, r28
    1d24:	ef 5a       	subi	r30, 0xAF	; 175
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a8 e4       	ldi	r26, 0x48	; 72
    1d2e:	b3 e4       	ldi	r27, 0x43	; 67
    1d30:	80 83       	st	Z, r24
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	a2 83       	std	Z+2, r26	; 0x02
    1d36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d38:	8e 01       	movw	r16, r28
    1d3a:	03 5b       	subi	r16, 0xB3	; 179
    1d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3e:	fe 01       	movw	r30, r28
    1d40:	ef 5a       	subi	r30, 0xAF	; 175
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	60 81       	ld	r22, Z
    1d46:	71 81       	ldd	r23, Z+1	; 0x01
    1d48:	82 81       	ldd	r24, Z+2	; 0x02
    1d4a:	93 81       	ldd	r25, Z+3	; 0x03
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	4a ef       	ldi	r20, 0xFA	; 250
    1d52:	54 e4       	ldi	r21, 0x44	; 68
    1d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	f8 01       	movw	r30, r16
    1d5e:	80 83       	st	Z, r24
    1d60:	91 83       	std	Z+1, r25	; 0x01
    1d62:	a2 83       	std	Z+2, r26	; 0x02
    1d64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d66:	fe 01       	movw	r30, r28
    1d68:	e3 5b       	subi	r30, 0xB3	; 179
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	60 81       	ld	r22, Z
    1d6e:	71 81       	ldd	r23, Z+1	; 0x01
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e8       	ldi	r20, 0x80	; 128
    1d7a:	5f e3       	ldi	r21, 0x3F	; 63
    1d7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d80:	88 23       	and	r24, r24
    1d82:	44 f4       	brge	.+16     	; 0x1d94 <LCD_vInit+0x8c>
		__ticks = 1;
    1d84:	fe 01       	movw	r30, r28
    1d86:	e5 5b       	subi	r30, 0xB5	; 181
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	80 83       	st	Z, r24
    1d92:	64 c0       	rjmp	.+200    	; 0x1e5c <LCD_vInit+0x154>
	else if (__tmp > 65535)
    1d94:	fe 01       	movw	r30, r28
    1d96:	e3 5b       	subi	r30, 0xB3	; 179
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	60 81       	ld	r22, Z
    1d9c:	71 81       	ldd	r23, Z+1	; 0x01
    1d9e:	82 81       	ldd	r24, Z+2	; 0x02
    1da0:	93 81       	ldd	r25, Z+3	; 0x03
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	3f ef       	ldi	r19, 0xFF	; 255
    1da6:	4f e7       	ldi	r20, 0x7F	; 127
    1da8:	57 e4       	ldi	r21, 0x47	; 71
    1daa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dae:	18 16       	cp	r1, r24
    1db0:	0c f0       	brlt	.+2      	; 0x1db4 <LCD_vInit+0xac>
    1db2:	43 c0       	rjmp	.+134    	; 0x1e3a <LCD_vInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db4:	fe 01       	movw	r30, r28
    1db6:	ef 5a       	subi	r30, 0xAF	; 175
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	60 81       	ld	r22, Z
    1dbc:	71 81       	ldd	r23, Z+1	; 0x01
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e2       	ldi	r20, 0x20	; 32
    1dc8:	51 e4       	ldi	r21, 0x41	; 65
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	8e 01       	movw	r16, r28
    1dd4:	05 5b       	subi	r16, 0xB5	; 181
    1dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd8:	bc 01       	movw	r22, r24
    1dda:	cd 01       	movw	r24, r26
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	f8 01       	movw	r30, r16
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	80 83       	st	Z, r24
    1dea:	1f c0       	rjmp	.+62     	; 0x1e2a <LCD_vInit+0x122>
    1dec:	fe 01       	movw	r30, r28
    1dee:	e7 5b       	subi	r30, 0xB7	; 183
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	88 ec       	ldi	r24, 0xC8	; 200
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e7 5b       	subi	r30, 0xB7	; 183
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	80 81       	ld	r24, Z
    1e02:	91 81       	ldd	r25, Z+1	; 0x01
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <LCD_vInit+0xfc>
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e7 5b       	subi	r30, 0xB7	; 183
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e12:	de 01       	movw	r26, r28
    1e14:	a5 5b       	subi	r26, 0xB5	; 181
    1e16:	bf 4f       	sbci	r27, 0xFF	; 255
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e5 5b       	subi	r30, 0xB5	; 181
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	11 96       	adiw	r26, 0x01	; 1
    1e26:	9c 93       	st	X, r25
    1e28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e5 5b       	subi	r30, 0xB5	; 181
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	d1 f6       	brne	.-76     	; 0x1dec <LCD_vInit+0xe4>
    1e38:	27 c0       	rjmp	.+78     	; 0x1e88 <LCD_vInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3a:	8e 01       	movw	r16, r28
    1e3c:	05 5b       	subi	r16, 0xB5	; 181
    1e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e40:	fe 01       	movw	r30, r28
    1e42:	e3 5b       	subi	r30, 0xB3	; 179
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	60 81       	ld	r22, Z
    1e48:	71 81       	ldd	r23, Z+1	; 0x01
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	93 81       	ldd	r25, Z+3	; 0x03
    1e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	f8 01       	movw	r30, r16
    1e58:	91 83       	std	Z+1, r25	; 0x01
    1e5a:	80 83       	st	Z, r24
    1e5c:	de 01       	movw	r26, r28
    1e5e:	a9 5b       	subi	r26, 0xB9	; 185
    1e60:	bf 4f       	sbci	r27, 0xFF	; 255
    1e62:	fe 01       	movw	r30, r28
    1e64:	e5 5b       	subi	r30, 0xB5	; 181
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	80 81       	ld	r24, Z
    1e6a:	91 81       	ldd	r25, Z+1	; 0x01
    1e6c:	8d 93       	st	X+, r24
    1e6e:	9c 93       	st	X, r25
    1e70:	fe 01       	movw	r30, r28
    1e72:	e9 5b       	subi	r30, 0xB9	; 185
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	80 81       	ld	r24, Z
    1e78:	91 81       	ldd	r25, Z+1	; 0x01
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <LCD_vInit+0x172>
    1e7e:	fe 01       	movw	r30, r28
    1e80:	e9 5b       	subi	r30, 0xB9	; 185
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	80 83       	st	Z, r24
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_SetPinDirection(0,4,1);
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	64 e0       	ldi	r22, 0x04	; 4
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
	DIO_SetPinDirection(0,5,1);
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	65 e0       	ldi	r22, 0x05	; 5
    1e96:	41 e0       	ldi	r20, 0x01	; 1
    1e98:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
	DIO_SetPinDirection(0,6,1);
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	66 e0       	ldi	r22, 0x06	; 6
    1ea0:	41 e0       	ldi	r20, 0x01	; 1
    1ea2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
	DIO_SetPinDirection(0,7,1);
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	67 e0       	ldi	r22, 0x07	; 7
    1eaa:	41 e0       	ldi	r20, 0x01	; 1
    1eac:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
	DIO_SetPinDirection(1,EN,1);
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	63 e0       	ldi	r22, 0x03	; 3
    1eb4:	41 e0       	ldi	r20, 0x01	; 1
    1eb6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
	DIO_SetPinDirection(1,RW,1);
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	62 e0       	ldi	r22, 0x02	; 2
    1ebe:	41 e0       	ldi	r20, 0x01	; 1
    1ec0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
	DIO_SetPinDirection(1,RS,1);
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	61 e0       	ldi	r22, 0x01	; 1
    1ec8:	41 e0       	ldi	r20, 0x01	; 1
    1eca:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
   	DIO_SetPinValue(1,RW,0);
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	62 e0       	ldi	r22, 0x02	; 2
    1ed2:	40 e0       	ldi	r20, 0x00	; 0
    1ed4:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	LCD_vSend_cmd(RETURN_HOME); //return home
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	0e 94 d5 12 	call	0x25aa	; 0x25aa <LCD_vSend_cmd>
    1ede:	fe 01       	movw	r30, r28
    1ee0:	ed 5b       	subi	r30, 0xBD	; 189
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a0 e2       	ldi	r26, 0x20	; 32
    1eea:	b1 e4       	ldi	r27, 0x41	; 65
    1eec:	80 83       	st	Z, r24
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	a2 83       	std	Z+2, r26	; 0x02
    1ef2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef4:	8e 01       	movw	r16, r28
    1ef6:	01 5c       	subi	r16, 0xC1	; 193
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	fe 01       	movw	r30, r28
    1efc:	ed 5b       	subi	r30, 0xBD	; 189
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	60 81       	ld	r22, Z
    1f02:	71 81       	ldd	r23, Z+1	; 0x01
    1f04:	82 81       	ldd	r24, Z+2	; 0x02
    1f06:	93 81       	ldd	r25, Z+3	; 0x03
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	4a ef       	ldi	r20, 0xFA	; 250
    1f0e:	54 e4       	ldi	r21, 0x44	; 68
    1f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	f8 01       	movw	r30, r16
    1f1a:	80 83       	st	Z, r24
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	a2 83       	std	Z+2, r26	; 0x02
    1f20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f22:	fe 01       	movw	r30, r28
    1f24:	ff 96       	adiw	r30, 0x3f	; 63
    1f26:	60 81       	ld	r22, Z
    1f28:	71 81       	ldd	r23, Z+1	; 0x01
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	93 81       	ldd	r25, Z+3	; 0x03
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e8       	ldi	r20, 0x80	; 128
    1f34:	5f e3       	ldi	r21, 0x3F	; 63
    1f36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f3a:	88 23       	and	r24, r24
    1f3c:	2c f4       	brge	.+10     	; 0x1f48 <LCD_vInit+0x240>
		__ticks = 1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	9e af       	std	Y+62, r25	; 0x3e
    1f44:	8d af       	std	Y+61, r24	; 0x3d
    1f46:	46 c0       	rjmp	.+140    	; 0x1fd4 <LCD_vInit+0x2cc>
	else if (__tmp > 65535)
    1f48:	fe 01       	movw	r30, r28
    1f4a:	ff 96       	adiw	r30, 0x3f	; 63
    1f4c:	60 81       	ld	r22, Z
    1f4e:	71 81       	ldd	r23, Z+1	; 0x01
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	93 81       	ldd	r25, Z+3	; 0x03
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	3f ef       	ldi	r19, 0xFF	; 255
    1f58:	4f e7       	ldi	r20, 0x7F	; 127
    1f5a:	57 e4       	ldi	r21, 0x47	; 71
    1f5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f60:	18 16       	cp	r1, r24
    1f62:	64 f5       	brge	.+88     	; 0x1fbc <LCD_vInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f64:	fe 01       	movw	r30, r28
    1f66:	ed 5b       	subi	r30, 0xBD	; 189
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e2       	ldi	r20, 0x20	; 32
    1f78:	51 e4       	ldi	r21, 0x41	; 65
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9e af       	std	Y+62, r25	; 0x3e
    1f90:	8d af       	std	Y+61, r24	; 0x3d
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <LCD_vInit+0x2aa>
    1f94:	88 ec       	ldi	r24, 0xC8	; 200
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9c af       	std	Y+60, r25	; 0x3c
    1f9a:	8b af       	std	Y+59, r24	; 0x3b
    1f9c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f9e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <LCD_vInit+0x298>
    1fa4:	9c af       	std	Y+60, r25	; 0x3c
    1fa6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1faa:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	9e af       	std	Y+62, r25	; 0x3e
    1fb0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	69 f7       	brne	.-38     	; 0x1f94 <LCD_vInit+0x28c>
    1fba:	16 c0       	rjmp	.+44     	; 0x1fe8 <LCD_vInit+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	ff 96       	adiw	r30, 0x3f	; 63
    1fc0:	60 81       	ld	r22, Z
    1fc2:	71 81       	ldd	r23, Z+1	; 0x01
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	93 81       	ldd	r25, Z+3	; 0x03
    1fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	9e af       	std	Y+62, r25	; 0x3e
    1fd2:	8d af       	std	Y+61, r24	; 0x3d
    1fd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fd6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fd8:	9a af       	std	Y+58, r25	; 0x3a
    1fda:	89 af       	std	Y+57, r24	; 0x39
    1fdc:	89 ad       	ldd	r24, Y+57	; 0x39
    1fde:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	f1 f7       	brne	.-4      	; 0x1fe0 <LCD_vInit+0x2d8>
    1fe4:	9a af       	std	Y+58, r25	; 0x3a
    1fe6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
    1fe8:	88 e2       	ldi	r24, 0x28	; 40
    1fea:	0e 94 d5 12 	call	0x25aa	; 0x25aa <LCD_vSend_cmd>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a0 e8       	ldi	r26, 0x80	; 128
    1ff4:	bf e3       	ldi	r27, 0x3F	; 63
    1ff6:	8d ab       	std	Y+53, r24	; 0x35
    1ff8:	9e ab       	std	Y+54, r25	; 0x36
    1ffa:	af ab       	std	Y+55, r26	; 0x37
    1ffc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffe:	6d a9       	ldd	r22, Y+53	; 0x35
    2000:	7e a9       	ldd	r23, Y+54	; 0x36
    2002:	8f a9       	ldd	r24, Y+55	; 0x37
    2004:	98 ad       	ldd	r25, Y+56	; 0x38
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a ef       	ldi	r20, 0xFA	; 250
    200c:	54 e4       	ldi	r21, 0x44	; 68
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	89 ab       	std	Y+49, r24	; 0x31
    2018:	9a ab       	std	Y+50, r25	; 0x32
    201a:	ab ab       	std	Y+51, r26	; 0x33
    201c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    201e:	69 a9       	ldd	r22, Y+49	; 0x31
    2020:	7a a9       	ldd	r23, Y+50	; 0x32
    2022:	8b a9       	ldd	r24, Y+51	; 0x33
    2024:	9c a9       	ldd	r25, Y+52	; 0x34
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2032:	88 23       	and	r24, r24
    2034:	2c f4       	brge	.+10     	; 0x2040 <LCD_vInit+0x338>
		__ticks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	98 ab       	std	Y+48, r25	; 0x30
    203c:	8f a7       	std	Y+47, r24	; 0x2f
    203e:	3f c0       	rjmp	.+126    	; 0x20be <LCD_vInit+0x3b6>
	else if (__tmp > 65535)
    2040:	69 a9       	ldd	r22, Y+49	; 0x31
    2042:	7a a9       	ldd	r23, Y+50	; 0x32
    2044:	8b a9       	ldd	r24, Y+51	; 0x33
    2046:	9c a9       	ldd	r25, Y+52	; 0x34
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	4c f5       	brge	.+82     	; 0x20aa <LCD_vInit+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	6d a9       	ldd	r22, Y+53	; 0x35
    205a:	7e a9       	ldd	r23, Y+54	; 0x36
    205c:	8f a9       	ldd	r24, Y+55	; 0x37
    205e:	98 ad       	ldd	r25, Y+56	; 0x38
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	98 ab       	std	Y+48, r25	; 0x30
    207e:	8f a7       	std	Y+47, r24	; 0x2f
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <LCD_vInit+0x398>
    2082:	88 ec       	ldi	r24, 0xC8	; 200
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9e a7       	std	Y+46, r25	; 0x2e
    2088:	8d a7       	std	Y+45, r24	; 0x2d
    208a:	8d a5       	ldd	r24, Y+45	; 0x2d
    208c:	9e a5       	ldd	r25, Y+46	; 0x2e
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_vInit+0x386>
    2092:	9e a7       	std	Y+46, r25	; 0x2e
    2094:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	8f a5       	ldd	r24, Y+47	; 0x2f
    2098:	98 a9       	ldd	r25, Y+48	; 0x30
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	98 ab       	std	Y+48, r25	; 0x30
    209e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a2:	98 a9       	ldd	r25, Y+48	; 0x30
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <LCD_vInit+0x37a>
    20a8:	14 c0       	rjmp	.+40     	; 0x20d2 <LCD_vInit+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	69 a9       	ldd	r22, Y+49	; 0x31
    20ac:	7a a9       	ldd	r23, Y+50	; 0x32
    20ae:	8b a9       	ldd	r24, Y+51	; 0x33
    20b0:	9c a9       	ldd	r25, Y+52	; 0x34
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	98 ab       	std	Y+48, r25	; 0x30
    20bc:	8f a7       	std	Y+47, r24	; 0x2f
    20be:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c0:	98 a9       	ldd	r25, Y+48	; 0x30
    20c2:	9c a7       	std	Y+44, r25	; 0x2c
    20c4:	8b a7       	std	Y+43, r24	; 0x2b
    20c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_vInit+0x3c2>
    20ce:	9c a7       	std	Y+44, r25	; 0x2c
    20d0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
    20d2:	8e e0       	ldi	r24, 0x0E	; 14
    20d4:	0e 94 d5 12 	call	0x25aa	; 0x25aa <LCD_vSend_cmd>
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a0 e8       	ldi	r26, 0x80	; 128
    20de:	bf e3       	ldi	r27, 0x3F	; 63
    20e0:	8f a3       	std	Y+39, r24	; 0x27
    20e2:	98 a7       	std	Y+40, r25	; 0x28
    20e4:	a9 a7       	std	Y+41, r26	; 0x29
    20e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e8:	6f a1       	ldd	r22, Y+39	; 0x27
    20ea:	78 a5       	ldd	r23, Y+40	; 0x28
    20ec:	89 a5       	ldd	r24, Y+41	; 0x29
    20ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	4a ef       	ldi	r20, 0xFA	; 250
    20f6:	54 e4       	ldi	r21, 0x44	; 68
    20f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	8b a3       	std	Y+35, r24	; 0x23
    2102:	9c a3       	std	Y+36, r25	; 0x24
    2104:	ad a3       	std	Y+37, r26	; 0x25
    2106:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2108:	6b a1       	ldd	r22, Y+35	; 0x23
    210a:	7c a1       	ldd	r23, Y+36	; 0x24
    210c:	8d a1       	ldd	r24, Y+37	; 0x25
    210e:	9e a1       	ldd	r25, Y+38	; 0x26
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e8       	ldi	r20, 0x80	; 128
    2116:	5f e3       	ldi	r21, 0x3F	; 63
    2118:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    211c:	88 23       	and	r24, r24
    211e:	2c f4       	brge	.+10     	; 0x212a <LCD_vInit+0x422>
		__ticks = 1;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9a a3       	std	Y+34, r25	; 0x22
    2126:	89 a3       	std	Y+33, r24	; 0x21
    2128:	3f c0       	rjmp	.+126    	; 0x21a8 <LCD_vInit+0x4a0>
	else if (__tmp > 65535)
    212a:	6b a1       	ldd	r22, Y+35	; 0x23
    212c:	7c a1       	ldd	r23, Y+36	; 0x24
    212e:	8d a1       	ldd	r24, Y+37	; 0x25
    2130:	9e a1       	ldd	r25, Y+38	; 0x26
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	3f ef       	ldi	r19, 0xFF	; 255
    2136:	4f e7       	ldi	r20, 0x7F	; 127
    2138:	57 e4       	ldi	r21, 0x47	; 71
    213a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    213e:	18 16       	cp	r1, r24
    2140:	4c f5       	brge	.+82     	; 0x2194 <LCD_vInit+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2142:	6f a1       	ldd	r22, Y+39	; 0x27
    2144:	78 a5       	ldd	r23, Y+40	; 0x28
    2146:	89 a5       	ldd	r24, Y+41	; 0x29
    2148:	9a a5       	ldd	r25, Y+42	; 0x2a
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e2       	ldi	r20, 0x20	; 32
    2150:	51 e4       	ldi	r21, 0x41	; 65
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	bc 01       	movw	r22, r24
    215c:	cd 01       	movw	r24, r26
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9a a3       	std	Y+34, r25	; 0x22
    2168:	89 a3       	std	Y+33, r24	; 0x21
    216a:	0f c0       	rjmp	.+30     	; 0x218a <LCD_vInit+0x482>
    216c:	88 ec       	ldi	r24, 0xC8	; 200
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	98 a3       	std	Y+32, r25	; 0x20
    2172:	8f 8f       	std	Y+31, r24	; 0x1f
    2174:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2176:	98 a1       	ldd	r25, Y+32	; 0x20
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <LCD_vInit+0x470>
    217c:	98 a3       	std	Y+32, r25	; 0x20
    217e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2180:	89 a1       	ldd	r24, Y+33	; 0x21
    2182:	9a a1       	ldd	r25, Y+34	; 0x22
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	9a a3       	std	Y+34, r25	; 0x22
    2188:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218a:	89 a1       	ldd	r24, Y+33	; 0x21
    218c:	9a a1       	ldd	r25, Y+34	; 0x22
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	69 f7       	brne	.-38     	; 0x216c <LCD_vInit+0x464>
    2192:	14 c0       	rjmp	.+40     	; 0x21bc <LCD_vInit+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2194:	6b a1       	ldd	r22, Y+35	; 0x23
    2196:	7c a1       	ldd	r23, Y+36	; 0x24
    2198:	8d a1       	ldd	r24, Y+37	; 0x25
    219a:	9e a1       	ldd	r25, Y+38	; 0x26
    219c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9a a3       	std	Y+34, r25	; 0x22
    21a6:	89 a3       	std	Y+33, r24	; 0x21
    21a8:	89 a1       	ldd	r24, Y+33	; 0x21
    21aa:	9a a1       	ldd	r25, Y+34	; 0x22
    21ac:	9e 8f       	std	Y+30, r25	; 0x1e
    21ae:	8d 8f       	std	Y+29, r24	; 0x1d
    21b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_vInit+0x4ac>
    21b8:	9e 8f       	std	Y+30, r25	; 0x1e
    21ba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	0e 94 d5 12 	call	0x25aa	; 0x25aa <LCD_vSend_cmd>
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	a0 e2       	ldi	r26, 0x20	; 32
    21c8:	b1 e4       	ldi	r27, 0x41	; 65
    21ca:	89 8f       	std	Y+25, r24	; 0x19
    21cc:	9a 8f       	std	Y+26, r25	; 0x1a
    21ce:	ab 8f       	std	Y+27, r26	; 0x1b
    21d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d2:	69 8d       	ldd	r22, Y+25	; 0x19
    21d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	4a ef       	ldi	r20, 0xFA	; 250
    21e0:	54 e4       	ldi	r21, 0x44	; 68
    21e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	8d 8b       	std	Y+21, r24	; 0x15
    21ec:	9e 8b       	std	Y+22, r25	; 0x16
    21ee:	af 8b       	std	Y+23, r26	; 0x17
    21f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21f2:	6d 89       	ldd	r22, Y+21	; 0x15
    21f4:	7e 89       	ldd	r23, Y+22	; 0x16
    21f6:	8f 89       	ldd	r24, Y+23	; 0x17
    21f8:	98 8d       	ldd	r25, Y+24	; 0x18
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e8       	ldi	r20, 0x80	; 128
    2200:	5f e3       	ldi	r21, 0x3F	; 63
    2202:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2206:	88 23       	and	r24, r24
    2208:	2c f4       	brge	.+10     	; 0x2214 <LCD_vInit+0x50c>
		__ticks = 1;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	9c 8b       	std	Y+20, r25	; 0x14
    2210:	8b 8b       	std	Y+19, r24	; 0x13
    2212:	3f c0       	rjmp	.+126    	; 0x2292 <LCD_vInit+0x58a>
	else if (__tmp > 65535)
    2214:	6d 89       	ldd	r22, Y+21	; 0x15
    2216:	7e 89       	ldd	r23, Y+22	; 0x16
    2218:	8f 89       	ldd	r24, Y+23	; 0x17
    221a:	98 8d       	ldd	r25, Y+24	; 0x18
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	3f ef       	ldi	r19, 0xFF	; 255
    2220:	4f e7       	ldi	r20, 0x7F	; 127
    2222:	57 e4       	ldi	r21, 0x47	; 71
    2224:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2228:	18 16       	cp	r1, r24
    222a:	4c f5       	brge	.+82     	; 0x227e <LCD_vInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222c:	69 8d       	ldd	r22, Y+25	; 0x19
    222e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2230:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2232:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e2       	ldi	r20, 0x20	; 32
    223a:	51 e4       	ldi	r21, 0x41	; 65
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9c 8b       	std	Y+20, r25	; 0x14
    2252:	8b 8b       	std	Y+19, r24	; 0x13
    2254:	0f c0       	rjmp	.+30     	; 0x2274 <LCD_vInit+0x56c>
    2256:	88 ec       	ldi	r24, 0xC8	; 200
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9a 8b       	std	Y+18, r25	; 0x12
    225c:	89 8b       	std	Y+17, r24	; 0x11
    225e:	89 89       	ldd	r24, Y+17	; 0x11
    2260:	9a 89       	ldd	r25, Y+18	; 0x12
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <LCD_vInit+0x55a>
    2266:	9a 8b       	std	Y+18, r25	; 0x12
    2268:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226a:	8b 89       	ldd	r24, Y+19	; 0x13
    226c:	9c 89       	ldd	r25, Y+20	; 0x14
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	9c 8b       	std	Y+20, r25	; 0x14
    2272:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2274:	8b 89       	ldd	r24, Y+19	; 0x13
    2276:	9c 89       	ldd	r25, Y+20	; 0x14
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	69 f7       	brne	.-38     	; 0x2256 <LCD_vInit+0x54e>
    227c:	14 c0       	rjmp	.+40     	; 0x22a6 <LCD_vInit+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227e:	6d 89       	ldd	r22, Y+21	; 0x15
    2280:	7e 89       	ldd	r23, Y+22	; 0x16
    2282:	8f 89       	ldd	r24, Y+23	; 0x17
    2284:	98 8d       	ldd	r25, Y+24	; 0x18
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	9c 8b       	std	Y+20, r25	; 0x14
    2290:	8b 8b       	std	Y+19, r24	; 0x13
    2292:	8b 89       	ldd	r24, Y+19	; 0x13
    2294:	9c 89       	ldd	r25, Y+20	; 0x14
    2296:	98 8b       	std	Y+16, r25	; 0x10
    2298:	8f 87       	std	Y+15, r24	; 0x0f
    229a:	8f 85       	ldd	r24, Y+15	; 0x0f
    229c:	98 89       	ldd	r25, Y+16	; 0x10
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LCD_vInit+0x596>
    22a2:	98 8b       	std	Y+16, r25	; 0x10
    22a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
    22a6:	86 e0       	ldi	r24, 0x06	; 6
    22a8:	0e 94 d5 12 	call	0x25aa	; 0x25aa <LCD_vSend_cmd>
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	a0 e8       	ldi	r26, 0x80	; 128
    22b2:	bf e3       	ldi	r27, 0x3F	; 63
    22b4:	8b 87       	std	Y+11, r24	; 0x0b
    22b6:	9c 87       	std	Y+12, r25	; 0x0c
    22b8:	ad 87       	std	Y+13, r26	; 0x0d
    22ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22be:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	4a ef       	ldi	r20, 0xFA	; 250
    22ca:	54 e4       	ldi	r21, 0x44	; 68
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	8f 83       	std	Y+7, r24	; 0x07
    22d6:	98 87       	std	Y+8, r25	; 0x08
    22d8:	a9 87       	std	Y+9, r26	; 0x09
    22da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22dc:	6f 81       	ldd	r22, Y+7	; 0x07
    22de:	78 85       	ldd	r23, Y+8	; 0x08
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e8       	ldi	r20, 0x80	; 128
    22ea:	5f e3       	ldi	r21, 0x3F	; 63
    22ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f0:	88 23       	and	r24, r24
    22f2:	2c f4       	brge	.+10     	; 0x22fe <LCD_vInit+0x5f6>
		__ticks = 1;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	9e 83       	std	Y+6, r25	; 0x06
    22fa:	8d 83       	std	Y+5, r24	; 0x05
    22fc:	3f c0       	rjmp	.+126    	; 0x237c <LCD_vInit+0x674>
	else if (__tmp > 65535)
    22fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2300:	78 85       	ldd	r23, Y+8	; 0x08
    2302:	89 85       	ldd	r24, Y+9	; 0x09
    2304:	9a 85       	ldd	r25, Y+10	; 0x0a
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	3f ef       	ldi	r19, 0xFF	; 255
    230a:	4f e7       	ldi	r20, 0x7F	; 127
    230c:	57 e4       	ldi	r21, 0x47	; 71
    230e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2312:	18 16       	cp	r1, r24
    2314:	4c f5       	brge	.+82     	; 0x2368 <LCD_vInit+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2316:	6b 85       	ldd	r22, Y+11	; 0x0b
    2318:	7c 85       	ldd	r23, Y+12	; 0x0c
    231a:	8d 85       	ldd	r24, Y+13	; 0x0d
    231c:	9e 85       	ldd	r25, Y+14	; 0x0e
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e2       	ldi	r20, 0x20	; 32
    2324:	51 e4       	ldi	r21, 0x41	; 65
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
    233e:	0f c0       	rjmp	.+30     	; 0x235e <LCD_vInit+0x656>
    2340:	88 ec       	ldi	r24, 0xC8	; 200
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	9c 83       	std	Y+4, r25	; 0x04
    2346:	8b 83       	std	Y+3, r24	; 0x03
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	9c 81       	ldd	r25, Y+4	; 0x04
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <LCD_vInit+0x644>
    2350:	9c 83       	std	Y+4, r25	; 0x04
    2352:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2354:	8d 81       	ldd	r24, Y+5	; 0x05
    2356:	9e 81       	ldd	r25, Y+6	; 0x06
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235e:	8d 81       	ldd	r24, Y+5	; 0x05
    2360:	9e 81       	ldd	r25, Y+6	; 0x06
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	69 f7       	brne	.-38     	; 0x2340 <LCD_vInit+0x638>
    2366:	14 c0       	rjmp	.+40     	; 0x2390 <LCD_vInit+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2368:	6f 81       	ldd	r22, Y+7	; 0x07
    236a:	78 85       	ldd	r23, Y+8	; 0x08
    236c:	89 85       	ldd	r24, Y+9	; 0x09
    236e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	9e 83       	std	Y+6, r25	; 0x06
    237a:	8d 83       	std	Y+5, r24	; 0x05
    237c:	8d 81       	ldd	r24, Y+5	; 0x05
    237e:	9e 81       	ldd	r25, Y+6	; 0x06
    2380:	9a 83       	std	Y+2, r25	; 0x02
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	9a 81       	ldd	r25, Y+2	; 0x02
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <LCD_vInit+0x680>
    238c:	9a 83       	std	Y+2, r25	; 0x02
    238e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	#endif
}
    2390:	cc 5a       	subi	r28, 0xAC	; 172
    2392:	df 4f       	sbci	r29, 0xFF	; 255
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	1f 91       	pop	r17
    23a4:	0f 91       	pop	r16
    23a6:	08 95       	ret

000023a8 <send_falling_edge>:


static void send_falling_edge(void)
{
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	6c 97       	sbiw	r28, 0x1c	; 28
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinValue(1,EN,1);
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	63 e0       	ldi	r22, 0x03	; 3
    23c0:	41 e0       	ldi	r20, 0x01	; 1
    23c2:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	a0 e0       	ldi	r26, 0x00	; 0
    23cc:	b0 e4       	ldi	r27, 0x40	; 64
    23ce:	89 8f       	std	Y+25, r24	; 0x19
    23d0:	9a 8f       	std	Y+26, r25	; 0x1a
    23d2:	ab 8f       	std	Y+27, r26	; 0x1b
    23d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d6:	69 8d       	ldd	r22, Y+25	; 0x19
    23d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	4a ef       	ldi	r20, 0xFA	; 250
    23e4:	54 e4       	ldi	r21, 0x44	; 68
    23e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	8d 8b       	std	Y+21, r24	; 0x15
    23f0:	9e 8b       	std	Y+22, r25	; 0x16
    23f2:	af 8b       	std	Y+23, r26	; 0x17
    23f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23f6:	6d 89       	ldd	r22, Y+21	; 0x15
    23f8:	7e 89       	ldd	r23, Y+22	; 0x16
    23fa:	8f 89       	ldd	r24, Y+23	; 0x17
    23fc:	98 8d       	ldd	r25, Y+24	; 0x18
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e8       	ldi	r20, 0x80	; 128
    2404:	5f e3       	ldi	r21, 0x3F	; 63
    2406:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    240a:	88 23       	and	r24, r24
    240c:	2c f4       	brge	.+10     	; 0x2418 <send_falling_edge+0x70>
		__ticks = 1;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	9c 8b       	std	Y+20, r25	; 0x14
    2414:	8b 8b       	std	Y+19, r24	; 0x13
    2416:	3f c0       	rjmp	.+126    	; 0x2496 <send_falling_edge+0xee>
	else if (__tmp > 65535)
    2418:	6d 89       	ldd	r22, Y+21	; 0x15
    241a:	7e 89       	ldd	r23, Y+22	; 0x16
    241c:	8f 89       	ldd	r24, Y+23	; 0x17
    241e:	98 8d       	ldd	r25, Y+24	; 0x18
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	3f ef       	ldi	r19, 0xFF	; 255
    2424:	4f e7       	ldi	r20, 0x7F	; 127
    2426:	57 e4       	ldi	r21, 0x47	; 71
    2428:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    242c:	18 16       	cp	r1, r24
    242e:	4c f5       	brge	.+82     	; 0x2482 <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2430:	69 8d       	ldd	r22, Y+25	; 0x19
    2432:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2434:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2436:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e2       	ldi	r20, 0x20	; 32
    243e:	51 e4       	ldi	r21, 0x41	; 65
    2440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	bc 01       	movw	r22, r24
    244a:	cd 01       	movw	r24, r26
    244c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	9c 8b       	std	Y+20, r25	; 0x14
    2456:	8b 8b       	std	Y+19, r24	; 0x13
    2458:	0f c0       	rjmp	.+30     	; 0x2478 <send_falling_edge+0xd0>
    245a:	88 ec       	ldi	r24, 0xC8	; 200
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	9a 8b       	std	Y+18, r25	; 0x12
    2460:	89 8b       	std	Y+17, r24	; 0x11
    2462:	89 89       	ldd	r24, Y+17	; 0x11
    2464:	9a 89       	ldd	r25, Y+18	; 0x12
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <send_falling_edge+0xbe>
    246a:	9a 8b       	std	Y+18, r25	; 0x12
    246c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246e:	8b 89       	ldd	r24, Y+19	; 0x13
    2470:	9c 89       	ldd	r25, Y+20	; 0x14
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	9c 8b       	std	Y+20, r25	; 0x14
    2476:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2478:	8b 89       	ldd	r24, Y+19	; 0x13
    247a:	9c 89       	ldd	r25, Y+20	; 0x14
    247c:	00 97       	sbiw	r24, 0x00	; 0
    247e:	69 f7       	brne	.-38     	; 0x245a <send_falling_edge+0xb2>
    2480:	14 c0       	rjmp	.+40     	; 0x24aa <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2482:	6d 89       	ldd	r22, Y+21	; 0x15
    2484:	7e 89       	ldd	r23, Y+22	; 0x16
    2486:	8f 89       	ldd	r24, Y+23	; 0x17
    2488:	98 8d       	ldd	r25, Y+24	; 0x18
    248a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	9c 8b       	std	Y+20, r25	; 0x14
    2494:	8b 8b       	std	Y+19, r24	; 0x13
    2496:	8b 89       	ldd	r24, Y+19	; 0x13
    2498:	9c 89       	ldd	r25, Y+20	; 0x14
    249a:	98 8b       	std	Y+16, r25	; 0x10
    249c:	8f 87       	std	Y+15, r24	; 0x0f
    249e:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a0:	98 89       	ldd	r25, Y+16	; 0x10
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <send_falling_edge+0xfa>
    24a6:	98 8b       	std	Y+16, r25	; 0x10
    24a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(1,EN,0);
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	63 e0       	ldi	r22, 0x03	; 3
    24ae:	40 e0       	ldi	r20, 0x00	; 0
    24b0:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	a0 e0       	ldi	r26, 0x00	; 0
    24ba:	b0 e4       	ldi	r27, 0x40	; 64
    24bc:	8b 87       	std	Y+11, r24	; 0x0b
    24be:	9c 87       	std	Y+12, r25	; 0x0c
    24c0:	ad 87       	std	Y+13, r26	; 0x0d
    24c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	4a ef       	ldi	r20, 0xFA	; 250
    24d2:	54 e4       	ldi	r21, 0x44	; 68
    24d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	8f 83       	std	Y+7, r24	; 0x07
    24de:	98 87       	std	Y+8, r25	; 0x08
    24e0:	a9 87       	std	Y+9, r26	; 0x09
    24e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24e4:	6f 81       	ldd	r22, Y+7	; 0x07
    24e6:	78 85       	ldd	r23, Y+8	; 0x08
    24e8:	89 85       	ldd	r24, Y+9	; 0x09
    24ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e8       	ldi	r20, 0x80	; 128
    24f2:	5f e3       	ldi	r21, 0x3F	; 63
    24f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f8:	88 23       	and	r24, r24
    24fa:	2c f4       	brge	.+10     	; 0x2506 <send_falling_edge+0x15e>
		__ticks = 1;
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	9e 83       	std	Y+6, r25	; 0x06
    2502:	8d 83       	std	Y+5, r24	; 0x05
    2504:	3f c0       	rjmp	.+126    	; 0x2584 <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    2506:	6f 81       	ldd	r22, Y+7	; 0x07
    2508:	78 85       	ldd	r23, Y+8	; 0x08
    250a:	89 85       	ldd	r24, Y+9	; 0x09
    250c:	9a 85       	ldd	r25, Y+10	; 0x0a
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	3f ef       	ldi	r19, 0xFF	; 255
    2512:	4f e7       	ldi	r20, 0x7F	; 127
    2514:	57 e4       	ldi	r21, 0x47	; 71
    2516:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    251a:	18 16       	cp	r1, r24
    251c:	4c f5       	brge	.+82     	; 0x2570 <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2520:	7c 85       	ldd	r23, Y+12	; 0x0c
    2522:	8d 85       	ldd	r24, Y+13	; 0x0d
    2524:	9e 85       	ldd	r25, Y+14	; 0x0e
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e2       	ldi	r20, 0x20	; 32
    252c:	51 e4       	ldi	r21, 0x41	; 65
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	bc 01       	movw	r22, r24
    2538:	cd 01       	movw	r24, r26
    253a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	9e 83       	std	Y+6, r25	; 0x06
    2544:	8d 83       	std	Y+5, r24	; 0x05
    2546:	0f c0       	rjmp	.+30     	; 0x2566 <send_falling_edge+0x1be>
    2548:	88 ec       	ldi	r24, 0xC8	; 200
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	9c 83       	std	Y+4, r25	; 0x04
    254e:	8b 83       	std	Y+3, r24	; 0x03
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	9c 81       	ldd	r25, Y+4	; 0x04
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <send_falling_edge+0x1ac>
    2558:	9c 83       	std	Y+4, r25	; 0x04
    255a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255c:	8d 81       	ldd	r24, Y+5	; 0x05
    255e:	9e 81       	ldd	r25, Y+6	; 0x06
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	9e 83       	std	Y+6, r25	; 0x06
    2564:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	9e 81       	ldd	r25, Y+6	; 0x06
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	69 f7       	brne	.-38     	; 0x2548 <send_falling_edge+0x1a0>
    256e:	14 c0       	rjmp	.+40     	; 0x2598 <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2570:	6f 81       	ldd	r22, Y+7	; 0x07
    2572:	78 85       	ldd	r23, Y+8	; 0x08
    2574:	89 85       	ldd	r24, Y+9	; 0x09
    2576:	9a 85       	ldd	r25, Y+10	; 0x0a
    2578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	9e 83       	std	Y+6, r25	; 0x06
    2582:	8d 83       	std	Y+5, r24	; 0x05
    2584:	8d 81       	ldd	r24, Y+5	; 0x05
    2586:	9e 81       	ldd	r25, Y+6	; 0x06
    2588:	9a 83       	std	Y+2, r25	; 0x02
    258a:	89 83       	std	Y+1, r24	; 0x01
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	9a 81       	ldd	r25, Y+2	; 0x02
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <send_falling_edge+0x1e8>
    2594:	9a 83       	std	Y+2, r25	; 0x02
    2596:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2598:	6c 96       	adiw	r28, 0x1c	; 28
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	cf 91       	pop	r28
    25a6:	df 91       	pop	r29
    25a8:	08 95       	ret

000025aa <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	2f 97       	sbiw	r28, 0x0f	; 15
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	f8 94       	cli
    25b8:	de bf       	out	0x3e, r29	; 62
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_SetPortValue(0,cmd);
	DIO_SetPinValue(1,RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble(0,cmd>>4);
    25c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c2:	98 2f       	mov	r25, r24
    25c4:	92 95       	swap	r25
    25c6:	9f 70       	andi	r25, 0x0F	; 15
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	69 2f       	mov	r22, r25
    25cc:	0e 94 48 0b 	call	0x1690	; 0x1690 <write_high_nibble>
	DIO_SetPinValue(1,RS,0);
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	61 e0       	ldi	r22, 0x01	; 1
    25d4:	40 e0       	ldi	r20, 0x00	; 0
    25d6:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	send_falling_edge();
    25da:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <send_falling_edge>
	write_high_nibble(0,cmd);
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    25e2:	0e 94 48 0b 	call	0x1690	; 0x1690 <write_high_nibble>
	DIO_SetPinValue(1,RS,0);
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	61 e0       	ldi	r22, 0x01	; 1
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	send_falling_edge();
    25f0:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <send_falling_edge>
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	a0 e8       	ldi	r26, 0x80	; 128
    25fa:	bf e3       	ldi	r27, 0x3F	; 63
    25fc:	8b 87       	std	Y+11, r24	; 0x0b
    25fe:	9c 87       	std	Y+12, r25	; 0x0c
    2600:	ad 87       	std	Y+13, r26	; 0x0d
    2602:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2604:	6b 85       	ldd	r22, Y+11	; 0x0b
    2606:	7c 85       	ldd	r23, Y+12	; 0x0c
    2608:	8d 85       	ldd	r24, Y+13	; 0x0d
    260a:	9e 85       	ldd	r25, Y+14	; 0x0e
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	4a ef       	ldi	r20, 0xFA	; 250
    2612:	54 e4       	ldi	r21, 0x44	; 68
    2614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	8f 83       	std	Y+7, r24	; 0x07
    261e:	98 87       	std	Y+8, r25	; 0x08
    2620:	a9 87       	std	Y+9, r26	; 0x09
    2622:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2624:	6f 81       	ldd	r22, Y+7	; 0x07
    2626:	78 85       	ldd	r23, Y+8	; 0x08
    2628:	89 85       	ldd	r24, Y+9	; 0x09
    262a:	9a 85       	ldd	r25, Y+10	; 0x0a
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e8       	ldi	r20, 0x80	; 128
    2632:	5f e3       	ldi	r21, 0x3F	; 63
    2634:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2638:	88 23       	and	r24, r24
    263a:	2c f4       	brge	.+10     	; 0x2646 <LCD_vSend_cmd+0x9c>
		__ticks = 1;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
    2644:	3f c0       	rjmp	.+126    	; 0x26c4 <LCD_vSend_cmd+0x11a>
	else if (__tmp > 65535)
    2646:	6f 81       	ldd	r22, Y+7	; 0x07
    2648:	78 85       	ldd	r23, Y+8	; 0x08
    264a:	89 85       	ldd	r24, Y+9	; 0x09
    264c:	9a 85       	ldd	r25, Y+10	; 0x0a
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	3f ef       	ldi	r19, 0xFF	; 255
    2652:	4f e7       	ldi	r20, 0x7F	; 127
    2654:	57 e4       	ldi	r21, 0x47	; 71
    2656:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    265a:	18 16       	cp	r1, r24
    265c:	4c f5       	brge	.+82     	; 0x26b0 <LCD_vSend_cmd+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2660:	7c 85       	ldd	r23, Y+12	; 0x0c
    2662:	8d 85       	ldd	r24, Y+13	; 0x0d
    2664:	9e 85       	ldd	r25, Y+14	; 0x0e
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e2       	ldi	r20, 0x20	; 32
    266c:	51 e4       	ldi	r21, 0x41	; 65
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	bc 01       	movw	r22, r24
    2678:	cd 01       	movw	r24, r26
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	9e 83       	std	Y+6, r25	; 0x06
    2684:	8d 83       	std	Y+5, r24	; 0x05
    2686:	0f c0       	rjmp	.+30     	; 0x26a6 <LCD_vSend_cmd+0xfc>
    2688:	88 ec       	ldi	r24, 0xC8	; 200
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9c 83       	std	Y+4, r25	; 0x04
    268e:	8b 83       	std	Y+3, r24	; 0x03
    2690:	8b 81       	ldd	r24, Y+3	; 0x03
    2692:	9c 81       	ldd	r25, Y+4	; 0x04
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <LCD_vSend_cmd+0xea>
    2698:	9c 83       	std	Y+4, r25	; 0x04
    269a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	9e 81       	ldd	r25, Y+6	; 0x06
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	9e 83       	std	Y+6, r25	; 0x06
    26a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a6:	8d 81       	ldd	r24, Y+5	; 0x05
    26a8:	9e 81       	ldd	r25, Y+6	; 0x06
    26aa:	00 97       	sbiw	r24, 0x00	; 0
    26ac:	69 f7       	brne	.-38     	; 0x2688 <LCD_vSend_cmd+0xde>
    26ae:	14 c0       	rjmp	.+40     	; 0x26d8 <LCD_vSend_cmd+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b0:	6f 81       	ldd	r22, Y+7	; 0x07
    26b2:	78 85       	ldd	r23, Y+8	; 0x08
    26b4:	89 85       	ldd	r24, Y+9	; 0x09
    26b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	9e 83       	std	Y+6, r25	; 0x06
    26c2:	8d 83       	std	Y+5, r24	; 0x05
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	9a 83       	std	Y+2, r25	; 0x02
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <LCD_vSend_cmd+0x126>
    26d4:	9a 83       	std	Y+2, r25	; 0x02
    26d6:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    26d8:	2f 96       	adiw	r28, 0x0f	; 15
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <LCD_vSend_char>:

void LCD_vSend_char(char data)
{
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	2f 97       	sbiw	r28, 0x0f	; 15
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_SetPortValue(0,data);
	DIO_SetPinValue(1,RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble(0,data>>4);
    2700:	8f 85       	ldd	r24, Y+15	; 0x0f
    2702:	98 2f       	mov	r25, r24
    2704:	92 95       	swap	r25
    2706:	9f 70       	andi	r25, 0x0F	; 15
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	69 2f       	mov	r22, r25
    270c:	0e 94 48 0b 	call	0x1690	; 0x1690 <write_high_nibble>
	DIO_SetPinValue(1,RS,1);
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	61 e0       	ldi	r22, 0x01	; 1
    2714:	41 e0       	ldi	r20, 0x01	; 1
    2716:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	send_falling_edge();
    271a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <send_falling_edge>
	write_high_nibble(0,data);
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	6f 85       	ldd	r22, Y+15	; 0x0f
    2722:	0e 94 48 0b 	call	0x1690	; 0x1690 <write_high_nibble>
	DIO_SetPinValue(1,RS,1);
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	61 e0       	ldi	r22, 0x01	; 1
    272a:	41 e0       	ldi	r20, 0x01	; 1
    272c:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	send_falling_edge();
    2730:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <send_falling_edge>
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	a0 e8       	ldi	r26, 0x80	; 128
    273a:	bf e3       	ldi	r27, 0x3F	; 63
    273c:	8b 87       	std	Y+11, r24	; 0x0b
    273e:	9c 87       	std	Y+12, r25	; 0x0c
    2740:	ad 87       	std	Y+13, r26	; 0x0d
    2742:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2744:	6b 85       	ldd	r22, Y+11	; 0x0b
    2746:	7c 85       	ldd	r23, Y+12	; 0x0c
    2748:	8d 85       	ldd	r24, Y+13	; 0x0d
    274a:	9e 85       	ldd	r25, Y+14	; 0x0e
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	4a ef       	ldi	r20, 0xFA	; 250
    2752:	54 e4       	ldi	r21, 0x44	; 68
    2754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	8f 83       	std	Y+7, r24	; 0x07
    275e:	98 87       	std	Y+8, r25	; 0x08
    2760:	a9 87       	std	Y+9, r26	; 0x09
    2762:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2764:	6f 81       	ldd	r22, Y+7	; 0x07
    2766:	78 85       	ldd	r23, Y+8	; 0x08
    2768:	89 85       	ldd	r24, Y+9	; 0x09
    276a:	9a 85       	ldd	r25, Y+10	; 0x0a
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e8       	ldi	r20, 0x80	; 128
    2772:	5f e3       	ldi	r21, 0x3F	; 63
    2774:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2778:	88 23       	and	r24, r24
    277a:	2c f4       	brge	.+10     	; 0x2786 <LCD_vSend_char+0x9c>
		__ticks = 1;
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	9e 83       	std	Y+6, r25	; 0x06
    2782:	8d 83       	std	Y+5, r24	; 0x05
    2784:	3f c0       	rjmp	.+126    	; 0x2804 <LCD_vSend_char+0x11a>
	else if (__tmp > 65535)
    2786:	6f 81       	ldd	r22, Y+7	; 0x07
    2788:	78 85       	ldd	r23, Y+8	; 0x08
    278a:	89 85       	ldd	r24, Y+9	; 0x09
    278c:	9a 85       	ldd	r25, Y+10	; 0x0a
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	3f ef       	ldi	r19, 0xFF	; 255
    2792:	4f e7       	ldi	r20, 0x7F	; 127
    2794:	57 e4       	ldi	r21, 0x47	; 71
    2796:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    279a:	18 16       	cp	r1, r24
    279c:	4c f5       	brge	.+82     	; 0x27f0 <LCD_vSend_char+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279e:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e2       	ldi	r20, 0x20	; 32
    27ac:	51 e4       	ldi	r21, 0x41	; 65
    27ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	bc 01       	movw	r22, r24
    27b8:	cd 01       	movw	r24, r26
    27ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	9e 83       	std	Y+6, r25	; 0x06
    27c4:	8d 83       	std	Y+5, r24	; 0x05
    27c6:	0f c0       	rjmp	.+30     	; 0x27e6 <LCD_vSend_char+0xfc>
    27c8:	88 ec       	ldi	r24, 0xC8	; 200
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	9c 83       	std	Y+4, r25	; 0x04
    27ce:	8b 83       	std	Y+3, r24	; 0x03
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	9c 81       	ldd	r25, Y+4	; 0x04
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <LCD_vSend_char+0xea>
    27d8:	9c 83       	std	Y+4, r25	; 0x04
    27da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e6:	8d 81       	ldd	r24, Y+5	; 0x05
    27e8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	69 f7       	brne	.-38     	; 0x27c8 <LCD_vSend_char+0xde>
    27ee:	14 c0       	rjmp	.+40     	; 0x2818 <LCD_vSend_char+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f0:	6f 81       	ldd	r22, Y+7	; 0x07
    27f2:	78 85       	ldd	r23, Y+8	; 0x08
    27f4:	89 85       	ldd	r24, Y+9	; 0x09
    27f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	9e 83       	std	Y+6, r25	; 0x06
    2802:	8d 83       	std	Y+5, r24	; 0x05
    2804:	8d 81       	ldd	r24, Y+5	; 0x05
    2806:	9e 81       	ldd	r25, Y+6	; 0x06
    2808:	9a 83       	std	Y+2, r25	; 0x02
    280a:	89 83       	std	Y+1, r24	; 0x01
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	9a 81       	ldd	r25, Y+2	; 0x02
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <LCD_vSend_char+0x126>
    2814:	9a 83       	std	Y+2, r25	; 0x02
    2816:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    2818:	2f 96       	adiw	r28, 0x0f	; 15
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	08 95       	ret

0000282a <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	00 d0       	rcall	.+0      	; 0x2830 <LCD_vSend_string+0x6>
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	9a 83       	std	Y+2, r25	; 0x02
    2836:	89 83       	std	Y+1, r24	; 0x01
    2838:	0a c0       	rjmp	.+20     	; 0x284e <LCD_vSend_string+0x24>
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
    283a:	e9 81       	ldd	r30, Y+1	; 0x01
    283c:	fa 81       	ldd	r31, Y+2	; 0x02
    283e:	80 81       	ld	r24, Z
    2840:	0e 94 75 13 	call	0x26ea	; 0x26ea <LCD_vSend_char>
		data++;
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	9a 81       	ldd	r25, Y+2	; 0x02
    2848:	01 96       	adiw	r24, 0x01	; 1
    284a:	9a 83       	std	Y+2, r25	; 0x02
    284c:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
    284e:	e9 81       	ldd	r30, Y+1	; 0x01
    2850:	fa 81       	ldd	r31, Y+2	; 0x02
    2852:	80 81       	ld	r24, Z
    2854:	88 23       	and	r24, r24
    2856:	89 f7       	brne	.-30     	; 0x283a <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <LCD_clearscreen>:
void LCD_clearscreen()
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	2e 97       	sbiw	r28, 0x0e	; 14
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
	LCD_vSend_cmd(CLR_SCREEN);
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	0e 94 d5 12 	call	0x25aa	; 0x25aa <LCD_vSend_cmd>
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	a0 e2       	ldi	r26, 0x20	; 32
    2882:	b1 e4       	ldi	r27, 0x41	; 65
    2884:	8b 87       	std	Y+11, r24	; 0x0b
    2886:	9c 87       	std	Y+12, r25	; 0x0c
    2888:	ad 87       	std	Y+13, r26	; 0x0d
    288a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288c:	6b 85       	ldd	r22, Y+11	; 0x0b
    288e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2890:	8d 85       	ldd	r24, Y+13	; 0x0d
    2892:	9e 85       	ldd	r25, Y+14	; 0x0e
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	4a ef       	ldi	r20, 0xFA	; 250
    289a:	54 e4       	ldi	r21, 0x44	; 68
    289c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	8f 83       	std	Y+7, r24	; 0x07
    28a6:	98 87       	std	Y+8, r25	; 0x08
    28a8:	a9 87       	std	Y+9, r26	; 0x09
    28aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28ac:	6f 81       	ldd	r22, Y+7	; 0x07
    28ae:	78 85       	ldd	r23, Y+8	; 0x08
    28b0:	89 85       	ldd	r24, Y+9	; 0x09
    28b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e8       	ldi	r20, 0x80	; 128
    28ba:	5f e3       	ldi	r21, 0x3F	; 63
    28bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28c0:	88 23       	and	r24, r24
    28c2:	2c f4       	brge	.+10     	; 0x28ce <LCD_clearscreen+0x6c>
		__ticks = 1;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9e 83       	std	Y+6, r25	; 0x06
    28ca:	8d 83       	std	Y+5, r24	; 0x05
    28cc:	3f c0       	rjmp	.+126    	; 0x294c <LCD_clearscreen+0xea>
	else if (__tmp > 65535)
    28ce:	6f 81       	ldd	r22, Y+7	; 0x07
    28d0:	78 85       	ldd	r23, Y+8	; 0x08
    28d2:	89 85       	ldd	r24, Y+9	; 0x09
    28d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	3f ef       	ldi	r19, 0xFF	; 255
    28da:	4f e7       	ldi	r20, 0x7F	; 127
    28dc:	57 e4       	ldi	r21, 0x47	; 71
    28de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28e2:	18 16       	cp	r1, r24
    28e4:	4c f5       	brge	.+82     	; 0x2938 <LCD_clearscreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e2       	ldi	r20, 0x20	; 32
    28f4:	51 e4       	ldi	r21, 0x41	; 65
    28f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	bc 01       	movw	r22, r24
    2900:	cd 01       	movw	r24, r26
    2902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	9e 83       	std	Y+6, r25	; 0x06
    290c:	8d 83       	std	Y+5, r24	; 0x05
    290e:	0f c0       	rjmp	.+30     	; 0x292e <LCD_clearscreen+0xcc>
    2910:	88 ec       	ldi	r24, 0xC8	; 200
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	9c 83       	std	Y+4, r25	; 0x04
    2916:	8b 83       	std	Y+3, r24	; 0x03
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	9c 81       	ldd	r25, Y+4	; 0x04
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	f1 f7       	brne	.-4      	; 0x291c <LCD_clearscreen+0xba>
    2920:	9c 83       	std	Y+4, r25	; 0x04
    2922:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2924:	8d 81       	ldd	r24, Y+5	; 0x05
    2926:	9e 81       	ldd	r25, Y+6	; 0x06
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	9e 83       	std	Y+6, r25	; 0x06
    292c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292e:	8d 81       	ldd	r24, Y+5	; 0x05
    2930:	9e 81       	ldd	r25, Y+6	; 0x06
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	69 f7       	brne	.-38     	; 0x2910 <LCD_clearscreen+0xae>
    2936:	14 c0       	rjmp	.+40     	; 0x2960 <LCD_clearscreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2938:	6f 81       	ldd	r22, Y+7	; 0x07
    293a:	78 85       	ldd	r23, Y+8	; 0x08
    293c:	89 85       	ldd	r24, Y+9	; 0x09
    293e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	9e 83       	std	Y+6, r25	; 0x06
    294a:	8d 83       	std	Y+5, r24	; 0x05
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	9a 83       	std	Y+2, r25	; 0x02
    2952:	89 83       	std	Y+1, r24	; 0x01
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	9a 81       	ldd	r25, Y+2	; 0x02
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	f1 f7       	brne	.-4      	; 0x2958 <LCD_clearscreen+0xf6>
    295c:	9a 83       	std	Y+2, r25	; 0x02
    295e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2960:	2e 96       	adiw	r28, 0x0e	; 14
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <lcd_set_cursor>:
void lcd_set_cursor(u8 x, u8 y) {
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	00 d0       	rcall	.+0      	; 0x2978 <lcd_set_cursor+0x6>
    2978:	0f 92       	push	r0
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	8a 83       	std	Y+2, r24	; 0x02
    2980:	6b 83       	std	Y+3, r22	; 0x03
    xpos = x;
    ypos = y;
#endif

#define LINE_SHIFT 6  // LCD controller constant
    uint8_t address = x | (y << LINE_SHIFT);
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	88 2f       	mov	r24, r24
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	00 24       	eor	r0, r0
    298a:	96 95       	lsr	r25
    298c:	87 95       	ror	r24
    298e:	07 94       	ror	r0
    2990:	96 95       	lsr	r25
    2992:	87 95       	ror	r24
    2994:	07 94       	ror	r0
    2996:	98 2f       	mov	r25, r24
    2998:	80 2d       	mov	r24, r0
    299a:	98 2f       	mov	r25, r24
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	89 2b       	or	r24, r25
    29a0:	89 83       	std	Y+1, r24	; 0x01
    LCD_vSend_cmd(SET_CURSOR_LOCATION | address);
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	80 68       	ori	r24, 0x80	; 128
    29a6:	0e 94 d5 12 	call	0x25aa	; 0x25aa <LCD_vSend_cmd>
}
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <lcd_printf>:
void lcd_printf(char *format, ...) {
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
    29be:	a2 97       	sbiw	r28, 0x22	; 34
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	de bf       	out	0x3e, r29	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	cd bf       	out	0x3d, r28	; 61
    va_list args;
    va_start(args, format);
    29ca:	ce 01       	movw	r24, r28
    29cc:	89 96       	adiw	r24, 0x29	; 41
    29ce:	9a 83       	std	Y+2, r25	; 0x02
    29d0:	89 83       	std	Y+1, r24	; 0x01
    uint8_t len = snprintf(NULL, 0, format, args);
    char *str_buffer = malloc(len + 1);
    vsnprintf(str_buffer, len + 1, format, args);
#else
    char str_buffer[16 * 2];
    vsnprintf(str_buffer, 16 * 2, format, args);
    29d2:	e9 81       	ldd	r30, Y+1	; 0x01
    29d4:	fa 81       	ldd	r31, Y+2	; 0x02
    29d6:	ce 01       	movw	r24, r28
    29d8:	03 96       	adiw	r24, 0x03	; 3
    29da:	2f a1       	ldd	r18, Y+39	; 0x27
    29dc:	38 a5       	ldd	r19, Y+40	; 0x28
    29de:	60 e2       	ldi	r22, 0x20	; 32
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	a9 01       	movw	r20, r18
    29e4:	9f 01       	movw	r18, r30
    29e6:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <vsnprintf>
#endif
    va_end(args);
    LCD_vSend_string(str_buffer);
    29ea:	ce 01       	movw	r24, r28
    29ec:	03 96       	adiw	r24, 0x03	; 3
    29ee:	0e 94 15 14 	call	0x282a	; 0x282a <LCD_vSend_string>
}
    29f2:	a2 96       	adiw	r28, 0x22	; 34
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	08 95       	ret

00002a04 <main>:
#include "DIO.h"	/* Include DIO header file */
#include "I2C.h"
#include "LCD.h"
#include <stdio.h>

int main(void) {
    2a04:	df 93       	push	r29
    2a06:	cf 93       	push	r28
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
    2a0c:	6a 97       	sbiw	r28, 0x1a	; 26
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	f8 94       	cli
    2a12:	de bf       	out	0x3e, r29	; 62
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	cd bf       	out	0x3d, r28	; 61
/* Initialize UART */
   LCD_vInit();
    2a18:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <LCD_vInit>

    /* Initialize project configuration */
    I2C_INT();  // set I2C Frequency, enable internal pull-up
    2a1c:	0e 94 b6 0b 	call	0x176c	; 0x176c <I2C_INT>
    // lcd_print("hmmm");
    mpu_init();
    2a20:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <mpu_init>
    // lcd_print("el i2c 3ady");
    mpu_data_t accel;

    while (1) {
        mpu_get_accel(&accel);
    2a24:	ce 01       	movw	r24, r28
    2a26:	0f 96       	adiw	r24, 0x0f	; 15
    2a28:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <mpu_get_accel>
        lcd_set_cursor(0,0);
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	0e 94 b9 14 	call	0x2972	; 0x2972 <lcd_set_cursor>
        lcd_printf("X: %d\n", (u32)accel.x);
    2a34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a36:	98 89       	ldd	r25, Y+16	; 0x10
    2a38:	a9 89       	ldd	r26, Y+17	; 0x11
    2a3a:	ba 89       	ldd	r27, Y+18	; 0x12
    2a3c:	bc 01       	movw	r22, r24
    2a3e:	cd 01       	movw	r24, r26
    2a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	9c 01       	movw	r18, r24
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <main+0x48>
    2a4c:	00 d0       	rcall	.+0      	; 0x2a4e <main+0x4a>
    2a4e:	ed b7       	in	r30, 0x3d	; 61
    2a50:	fe b7       	in	r31, 0x3e	; 62
    2a52:	31 96       	adiw	r30, 0x01	; 1
    2a54:	80 e6       	ldi	r24, 0x60	; 96
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	91 83       	std	Z+1, r25	; 0x01
    2a5a:	80 83       	st	Z, r24
    2a5c:	33 83       	std	Z+3, r19	; 0x03
    2a5e:	22 83       	std	Z+2, r18	; 0x02
    2a60:	0e 94 db 14 	call	0x29b6	; 0x29b6 <lcd_printf>
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
        lcd_set_cursor(0,1);
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	61 e0       	ldi	r22, 0x01	; 1
    2a70:	0e 94 b9 14 	call	0x2972	; 0x2972 <lcd_set_cursor>
        lcd_printf("Y: %d\n", (u32)accel.y);
    2a74:	8b 89       	ldd	r24, Y+19	; 0x13
    2a76:	9c 89       	ldd	r25, Y+20	; 0x14
    2a78:	ad 89       	ldd	r26, Y+21	; 0x15
    2a7a:	be 89       	ldd	r27, Y+22	; 0x16
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	cd 01       	movw	r24, r26
    2a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	9c 01       	movw	r18, r24
    2a8a:	00 d0       	rcall	.+0      	; 0x2a8c <main+0x88>
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <main+0x8a>
    2a8e:	ed b7       	in	r30, 0x3d	; 61
    2a90:	fe b7       	in	r31, 0x3e	; 62
    2a92:	31 96       	adiw	r30, 0x01	; 1
    2a94:	87 e6       	ldi	r24, 0x67	; 103
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	91 83       	std	Z+1, r25	; 0x01
    2a9a:	80 83       	st	Z, r24
    2a9c:	33 83       	std	Z+3, r19	; 0x03
    2a9e:	22 83       	std	Z+2, r18	; 0x02
    2aa0:	0e 94 db 14 	call	0x29b6	; 0x29b6 <lcd_printf>
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	a8 e4       	ldi	r26, 0x48	; 72
    2ab2:	b3 e4       	ldi	r27, 0x43	; 67
    2ab4:	8b 87       	std	Y+11, r24	; 0x0b
    2ab6:	9c 87       	std	Y+12, r25	; 0x0c
    2ab8:	ad 87       	std	Y+13, r26	; 0x0d
    2aba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	4a ef       	ldi	r20, 0xFA	; 250
    2aca:	54 e4       	ldi	r21, 0x44	; 68
    2acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	8f 83       	std	Y+7, r24	; 0x07
    2ad6:	98 87       	std	Y+8, r25	; 0x08
    2ad8:	a9 87       	std	Y+9, r26	; 0x09
    2ada:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2adc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ade:	78 85       	ldd	r23, Y+8	; 0x08
    2ae0:	89 85       	ldd	r24, Y+9	; 0x09
    2ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e8       	ldi	r20, 0x80	; 128
    2aea:	5f e3       	ldi	r21, 0x3F	; 63
    2aec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2af0:	88 23       	and	r24, r24
    2af2:	2c f4       	brge	.+10     	; 0x2afe <main+0xfa>
		__ticks = 1;
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	9e 83       	std	Y+6, r25	; 0x06
    2afa:	8d 83       	std	Y+5, r24	; 0x05
    2afc:	3f c0       	rjmp	.+126    	; 0x2b7c <main+0x178>
	else if (__tmp > 65535)
    2afe:	6f 81       	ldd	r22, Y+7	; 0x07
    2b00:	78 85       	ldd	r23, Y+8	; 0x08
    2b02:	89 85       	ldd	r24, Y+9	; 0x09
    2b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	3f ef       	ldi	r19, 0xFF	; 255
    2b0a:	4f e7       	ldi	r20, 0x7F	; 127
    2b0c:	57 e4       	ldi	r21, 0x47	; 71
    2b0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b12:	18 16       	cp	r1, r24
    2b14:	4c f5       	brge	.+82     	; 0x2b68 <main+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e2       	ldi	r20, 0x20	; 32
    2b24:	51 e4       	ldi	r21, 0x41	; 65
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
    2b3e:	0f c0       	rjmp	.+30     	; 0x2b5e <main+0x15a>
    2b40:	88 ec       	ldi	r24, 0xC8	; 200
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	9c 83       	std	Y+4, r25	; 0x04
    2b46:	8b 83       	std	Y+3, r24	; 0x03
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <main+0x148>
    2b50:	9c 83       	std	Y+4, r25	; 0x04
    2b52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b54:	8d 81       	ldd	r24, Y+5	; 0x05
    2b56:	9e 81       	ldd	r25, Y+6	; 0x06
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	9e 83       	std	Y+6, r25	; 0x06
    2b5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b60:	9e 81       	ldd	r25, Y+6	; 0x06
    2b62:	00 97       	sbiw	r24, 0x00	; 0
    2b64:	69 f7       	brne	.-38     	; 0x2b40 <main+0x13c>
    2b66:	5e cf       	rjmp	.-324    	; 0x2a24 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b68:	6f 81       	ldd	r22, Y+7	; 0x07
    2b6a:	78 85       	ldd	r23, Y+8	; 0x08
    2b6c:	89 85       	ldd	r24, Y+9	; 0x09
    2b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	9e 83       	std	Y+6, r25	; 0x06
    2b7a:	8d 83       	std	Y+5, r24	; 0x05
    2b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b80:	9a 83       	std	Y+2, r25	; 0x02
    2b82:	89 83       	std	Y+1, r24	; 0x01
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	9a 81       	ldd	r25, Y+2	; 0x02
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	f1 f7       	brne	.-4      	; 0x2b88 <main+0x184>
    2b8c:	9a 83       	std	Y+2, r25	; 0x02
    2b8e:	89 83       	std	Y+1, r24	; 0x01
    2b90:	49 cf       	rjmp	.-366    	; 0x2a24 <main+0x20>

00002b92 <mpu_init>:




void mpu_init(void)
{
    2b92:	df 93       	push	r29
    2b94:	cf 93       	push	r28
    2b96:	00 d0       	rcall	.+0      	; 0x2b98 <mpu_init+0x6>
    2b98:	cd b7       	in	r28, 0x3d	; 61
    2b9a:	de b7       	in	r29, 0x3e	; 62
	// puts("Write 0 to PWR_MGMT_1 reg to wakeup MPU.");
	u8 data[2] = {PWR_MGMT_1, 0};
    2b9c:	8b e6       	ldi	r24, 0x6B	; 107
    2b9e:	89 83       	std	Y+1, r24	; 0x01
    2ba0:	1a 82       	std	Y+2, r1	; 0x02

}
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <mpu_get_accel_raw>:


void mpu_get_accel_raw(mpu_data_t* mpu_data)
{
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
    2bb4:	28 97       	sbiw	r28, 0x08	; 8
    2bb6:	0f b6       	in	r0, 0x3f	; 63
    2bb8:	f8 94       	cli
    2bba:	de bf       	out	0x3e, r29	; 62
    2bbc:	0f be       	out	0x3f, r0	; 63
    2bbe:	cd bf       	out	0x3d, r28	; 61
    2bc0:	98 87       	std	Y+8, r25	; 0x08
    2bc2:	8f 83       	std	Y+7, r24	; 0x07

	/* 2 registers for each of accel x, y and z data */
	u8 data[6];
	
	data[0] = ACCEL_XOUT_H;
    2bc4:	8b e3       	ldi	r24, 0x3B	; 59
    2bc6:	89 83       	std	Y+1, r24	; 0x01
	
	/* Default accel config +/- 2g */
	mpu_data->x = (s16)(data[0] << 8 | data[1]) / 16384.0;
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	88 2f       	mov	r24, r24
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	38 2f       	mov	r19, r24
    2bd0:	22 27       	eor	r18, r18
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	88 2f       	mov	r24, r24
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	82 2b       	or	r24, r18
    2bda:	93 2b       	or	r25, r19
    2bdc:	aa 27       	eor	r26, r26
    2bde:	97 fd       	sbrc	r25, 7
    2be0:	a0 95       	com	r26
    2be2:	ba 2f       	mov	r27, r26
    2be4:	bc 01       	movw	r22, r24
    2be6:	cd 01       	movw	r24, r26
    2be8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	bc 01       	movw	r22, r24
    2bf2:	cd 01       	movw	r24, r26
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e8       	ldi	r20, 0x80	; 128
    2bfa:	56 e4       	ldi	r21, 0x46	; 70
    2bfc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	ef 81       	ldd	r30, Y+7	; 0x07
    2c06:	f8 85       	ldd	r31, Y+8	; 0x08
    2c08:	80 83       	st	Z, r24
    2c0a:	91 83       	std	Z+1, r25	; 0x01
    2c0c:	a2 83       	std	Z+2, r26	; 0x02
    2c0e:	b3 83       	std	Z+3, r27	; 0x03
	mpu_data->y = (s16)(data[2] << 8 | data[3]) / 16384.0;
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	88 2f       	mov	r24, r24
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	38 2f       	mov	r19, r24
    2c18:	22 27       	eor	r18, r18
    2c1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c1c:	88 2f       	mov	r24, r24
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	82 2b       	or	r24, r18
    2c22:	93 2b       	or	r25, r19
    2c24:	aa 27       	eor	r26, r26
    2c26:	97 fd       	sbrc	r25, 7
    2c28:	a0 95       	com	r26
    2c2a:	ba 2f       	mov	r27, r26
    2c2c:	bc 01       	movw	r22, r24
    2c2e:	cd 01       	movw	r24, r26
    2c30:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	bc 01       	movw	r22, r24
    2c3a:	cd 01       	movw	r24, r26
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e8       	ldi	r20, 0x80	; 128
    2c42:	56 e4       	ldi	r21, 0x46	; 70
    2c44:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	ef 81       	ldd	r30, Y+7	; 0x07
    2c4e:	f8 85       	ldd	r31, Y+8	; 0x08
    2c50:	84 83       	std	Z+4, r24	; 0x04
    2c52:	95 83       	std	Z+5, r25	; 0x05
    2c54:	a6 83       	std	Z+6, r26	; 0x06
    2c56:	b7 83       	std	Z+7, r27	; 0x07
	mpu_data->z = (s16)(data[4] << 8 | data[5]) / 16384.0;
    2c58:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5a:	88 2f       	mov	r24, r24
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	38 2f       	mov	r19, r24
    2c60:	22 27       	eor	r18, r18
    2c62:	8e 81       	ldd	r24, Y+6	; 0x06
    2c64:	88 2f       	mov	r24, r24
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	82 2b       	or	r24, r18
    2c6a:	93 2b       	or	r25, r19
    2c6c:	aa 27       	eor	r26, r26
    2c6e:	97 fd       	sbrc	r25, 7
    2c70:	a0 95       	com	r26
    2c72:	ba 2f       	mov	r27, r26
    2c74:	bc 01       	movw	r22, r24
    2c76:	cd 01       	movw	r24, r26
    2c78:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	bc 01       	movw	r22, r24
    2c82:	cd 01       	movw	r24, r26
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e8       	ldi	r20, 0x80	; 128
    2c8a:	56 e4       	ldi	r21, 0x46	; 70
    2c8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	ef 81       	ldd	r30, Y+7	; 0x07
    2c96:	f8 85       	ldd	r31, Y+8	; 0x08
    2c98:	80 87       	std	Z+8, r24	; 0x08
    2c9a:	91 87       	std	Z+9, r25	; 0x09
    2c9c:	a2 87       	std	Z+10, r26	; 0x0a
    2c9e:	b3 87       	std	Z+11, r27	; 0x0b
}
    2ca0:	28 96       	adiw	r28, 0x08	; 8
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <mpu_get_accel>:


void mpu_get_accel(mpu_data_t* mpu_data)
{
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <mpu_get_accel+0x6>
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	9a 83       	std	Y+2, r25	; 0x02
    2cbe:	89 83       	std	Y+1, r24	; 0x01
	mpu_get_accel_raw(mpu_data);
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc4:	0e 94 d6 15 	call	0x2bac	; 0x2bac <mpu_get_accel_raw>
	mpu_data->x = mpu_data->x * 9.81;
    2cc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2cca:	fa 81       	ldd	r31, Y+2	; 0x02
    2ccc:	80 81       	ld	r24, Z
    2cce:	91 81       	ldd	r25, Z+1	; 0x01
    2cd0:	a2 81       	ldd	r26, Z+2	; 0x02
    2cd2:	b3 81       	ldd	r27, Z+3	; 0x03
    2cd4:	bc 01       	movw	r22, r24
    2cd6:	cd 01       	movw	r24, r26
    2cd8:	23 ec       	ldi	r18, 0xC3	; 195
    2cda:	35 ef       	ldi	r19, 0xF5	; 245
    2cdc:	4c e1       	ldi	r20, 0x1C	; 28
    2cde:	51 e4       	ldi	r21, 0x41	; 65
    2ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	e9 81       	ldd	r30, Y+1	; 0x01
    2cea:	fa 81       	ldd	r31, Y+2	; 0x02
    2cec:	80 83       	st	Z, r24
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	a2 83       	std	Z+2, r26	; 0x02
    2cf2:	b3 83       	std	Z+3, r27	; 0x03
	mpu_data->y = mpu_data->y * 9.81;
    2cf4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cf6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cf8:	84 81       	ldd	r24, Z+4	; 0x04
    2cfa:	95 81       	ldd	r25, Z+5	; 0x05
    2cfc:	a6 81       	ldd	r26, Z+6	; 0x06
    2cfe:	b7 81       	ldd	r27, Z+7	; 0x07
    2d00:	bc 01       	movw	r22, r24
    2d02:	cd 01       	movw	r24, r26
    2d04:	23 ec       	ldi	r18, 0xC3	; 195
    2d06:	35 ef       	ldi	r19, 0xF5	; 245
    2d08:	4c e1       	ldi	r20, 0x1C	; 28
    2d0a:	51 e4       	ldi	r21, 0x41	; 65
    2d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	e9 81       	ldd	r30, Y+1	; 0x01
    2d16:	fa 81       	ldd	r31, Y+2	; 0x02
    2d18:	84 83       	std	Z+4, r24	; 0x04
    2d1a:	95 83       	std	Z+5, r25	; 0x05
    2d1c:	a6 83       	std	Z+6, r26	; 0x06
    2d1e:	b7 83       	std	Z+7, r27	; 0x07
	mpu_data->z = mpu_data->z * 9.81;
    2d20:	e9 81       	ldd	r30, Y+1	; 0x01
    2d22:	fa 81       	ldd	r31, Y+2	; 0x02
    2d24:	80 85       	ldd	r24, Z+8	; 0x08
    2d26:	91 85       	ldd	r25, Z+9	; 0x09
    2d28:	a2 85       	ldd	r26, Z+10	; 0x0a
    2d2a:	b3 85       	ldd	r27, Z+11	; 0x0b
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	23 ec       	ldi	r18, 0xC3	; 195
    2d32:	35 ef       	ldi	r19, 0xF5	; 245
    2d34:	4c e1       	ldi	r20, 0x1C	; 28
    2d36:	51 e4       	ldi	r21, 0x41	; 65
    2d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	e9 81       	ldd	r30, Y+1	; 0x01
    2d42:	fa 81       	ldd	r31, Y+2	; 0x02
    2d44:	80 87       	std	Z+8, r24	; 0x08
    2d46:	91 87       	std	Z+9, r25	; 0x09
    2d48:	a2 87       	std	Z+10, r26	; 0x0a
    2d4a:	b3 87       	std	Z+11, r27	; 0x0b
}
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	08 95       	ret

00002d56 <__prologue_saves__>:
    2d56:	2f 92       	push	r2
    2d58:	3f 92       	push	r3
    2d5a:	4f 92       	push	r4
    2d5c:	5f 92       	push	r5
    2d5e:	6f 92       	push	r6
    2d60:	7f 92       	push	r7
    2d62:	8f 92       	push	r8
    2d64:	9f 92       	push	r9
    2d66:	af 92       	push	r10
    2d68:	bf 92       	push	r11
    2d6a:	cf 92       	push	r12
    2d6c:	df 92       	push	r13
    2d6e:	ef 92       	push	r14
    2d70:	ff 92       	push	r15
    2d72:	0f 93       	push	r16
    2d74:	1f 93       	push	r17
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	ca 1b       	sub	r28, r26
    2d80:	db 0b       	sbc	r29, r27
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	09 94       	ijmp

00002d8e <__epilogue_restores__>:
    2d8e:	2a 88       	ldd	r2, Y+18	; 0x12
    2d90:	39 88       	ldd	r3, Y+17	; 0x11
    2d92:	48 88       	ldd	r4, Y+16	; 0x10
    2d94:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d96:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d98:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2da0:	b9 84       	ldd	r11, Y+9	; 0x09
    2da2:	c8 84       	ldd	r12, Y+8	; 0x08
    2da4:	df 80       	ldd	r13, Y+7	; 0x07
    2da6:	ee 80       	ldd	r14, Y+6	; 0x06
    2da8:	fd 80       	ldd	r15, Y+5	; 0x05
    2daa:	0c 81       	ldd	r16, Y+4	; 0x04
    2dac:	1b 81       	ldd	r17, Y+3	; 0x03
    2dae:	aa 81       	ldd	r26, Y+2	; 0x02
    2db0:	b9 81       	ldd	r27, Y+1	; 0x01
    2db2:	ce 0f       	add	r28, r30
    2db4:	d1 1d       	adc	r29, r1
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	f8 94       	cli
    2dba:	de bf       	out	0x3e, r29	; 62
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	cd bf       	out	0x3d, r28	; 61
    2dc0:	ed 01       	movw	r28, r26
    2dc2:	08 95       	ret

00002dc4 <vsnprintf>:
    2dc4:	ae e0       	ldi	r26, 0x0E	; 14
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	e8 ee       	ldi	r30, 0xE8	; 232
    2dca:	f6 e1       	ldi	r31, 0x16	; 22
    2dcc:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__+0x1c>
    2dd0:	8c 01       	movw	r16, r24
    2dd2:	77 ff       	sbrs	r23, 7
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <vsnprintf+0x16>
    2dd6:	60 e0       	ldi	r22, 0x00	; 0
    2dd8:	70 e8       	ldi	r23, 0x80	; 128
    2dda:	61 50       	subi	r22, 0x01	; 1
    2ddc:	70 40       	sbci	r23, 0x00	; 0
    2dde:	7e 83       	std	Y+6, r23	; 0x06
    2de0:	6d 83       	std	Y+5, r22	; 0x05
    2de2:	1a 83       	std	Y+2, r17	; 0x02
    2de4:	09 83       	std	Y+1, r16	; 0x01
    2de6:	86 e0       	ldi	r24, 0x06	; 6
    2de8:	8c 83       	std	Y+4, r24	; 0x04
    2dea:	ce 01       	movw	r24, r28
    2dec:	01 96       	adiw	r24, 0x01	; 1
    2dee:	ba 01       	movw	r22, r20
    2df0:	a9 01       	movw	r20, r18
    2df2:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <vfprintf>
    2df6:	2d 81       	ldd	r18, Y+5	; 0x05
    2df8:	3e 81       	ldd	r19, Y+6	; 0x06
    2dfa:	37 fd       	sbrc	r19, 7
    2dfc:	09 c0       	rjmp	.+18     	; 0x2e10 <vsnprintf+0x4c>
    2dfe:	ef 81       	ldd	r30, Y+7	; 0x07
    2e00:	f8 85       	ldd	r31, Y+8	; 0x08
    2e02:	2e 17       	cp	r18, r30
    2e04:	3f 07       	cpc	r19, r31
    2e06:	0c f4       	brge	.+2      	; 0x2e0a <vsnprintf+0x46>
    2e08:	f9 01       	movw	r30, r18
    2e0a:	e0 0f       	add	r30, r16
    2e0c:	f1 1f       	adc	r31, r17
    2e0e:	10 82       	st	Z, r1
    2e10:	2e 96       	adiw	r28, 0x0e	; 14
    2e12:	e4 e0       	ldi	r30, 0x04	; 4
    2e14:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__+0x1c>

00002e18 <vfprintf>:
    2e18:	ab e0       	ldi	r26, 0x0B	; 11
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	e2 e1       	ldi	r30, 0x12	; 18
    2e1e:	f7 e1       	ldi	r31, 0x17	; 23
    2e20:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__prologue_saves__>
    2e24:	3c 01       	movw	r6, r24
    2e26:	2b 01       	movw	r4, r22
    2e28:	5a 01       	movw	r10, r20
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	17 82       	std	Z+7, r1	; 0x07
    2e2e:	16 82       	std	Z+6, r1	; 0x06
    2e30:	83 81       	ldd	r24, Z+3	; 0x03
    2e32:	81 fd       	sbrc	r24, 1
    2e34:	03 c0       	rjmp	.+6      	; 0x2e3c <vfprintf+0x24>
    2e36:	6f ef       	ldi	r22, 0xFF	; 255
    2e38:	7f ef       	ldi	r23, 0xFF	; 255
    2e3a:	c6 c1       	rjmp	.+908    	; 0x31c8 <vfprintf+0x3b0>
    2e3c:	9a e0       	ldi	r25, 0x0A	; 10
    2e3e:	89 2e       	mov	r8, r25
    2e40:	1e 01       	movw	r2, r28
    2e42:	08 94       	sec
    2e44:	21 1c       	adc	r2, r1
    2e46:	31 1c       	adc	r3, r1
    2e48:	f3 01       	movw	r30, r6
    2e4a:	23 81       	ldd	r18, Z+3	; 0x03
    2e4c:	f2 01       	movw	r30, r4
    2e4e:	23 fd       	sbrc	r18, 3
    2e50:	85 91       	lpm	r24, Z+
    2e52:	23 ff       	sbrs	r18, 3
    2e54:	81 91       	ld	r24, Z+
    2e56:	2f 01       	movw	r4, r30
    2e58:	88 23       	and	r24, r24
    2e5a:	09 f4       	brne	.+2      	; 0x2e5e <vfprintf+0x46>
    2e5c:	b2 c1       	rjmp	.+868    	; 0x31c2 <vfprintf+0x3aa>
    2e5e:	85 32       	cpi	r24, 0x25	; 37
    2e60:	39 f4       	brne	.+14     	; 0x2e70 <vfprintf+0x58>
    2e62:	23 fd       	sbrc	r18, 3
    2e64:	85 91       	lpm	r24, Z+
    2e66:	23 ff       	sbrs	r18, 3
    2e68:	81 91       	ld	r24, Z+
    2e6a:	2f 01       	movw	r4, r30
    2e6c:	85 32       	cpi	r24, 0x25	; 37
    2e6e:	29 f4       	brne	.+10     	; 0x2e7a <vfprintf+0x62>
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	b3 01       	movw	r22, r6
    2e74:	0e 94 ff 18 	call	0x31fe	; 0x31fe <fputc>
    2e78:	e7 cf       	rjmp	.-50     	; 0x2e48 <vfprintf+0x30>
    2e7a:	98 2f       	mov	r25, r24
    2e7c:	ff 24       	eor	r15, r15
    2e7e:	ee 24       	eor	r14, r14
    2e80:	99 24       	eor	r9, r9
    2e82:	ff e1       	ldi	r31, 0x1F	; 31
    2e84:	ff 15       	cp	r31, r15
    2e86:	d0 f0       	brcs	.+52     	; 0x2ebc <vfprintf+0xa4>
    2e88:	9b 32       	cpi	r25, 0x2B	; 43
    2e8a:	69 f0       	breq	.+26     	; 0x2ea6 <vfprintf+0x8e>
    2e8c:	9c 32       	cpi	r25, 0x2C	; 44
    2e8e:	28 f4       	brcc	.+10     	; 0x2e9a <vfprintf+0x82>
    2e90:	90 32       	cpi	r25, 0x20	; 32
    2e92:	59 f0       	breq	.+22     	; 0x2eaa <vfprintf+0x92>
    2e94:	93 32       	cpi	r25, 0x23	; 35
    2e96:	91 f4       	brne	.+36     	; 0x2ebc <vfprintf+0xa4>
    2e98:	0e c0       	rjmp	.+28     	; 0x2eb6 <vfprintf+0x9e>
    2e9a:	9d 32       	cpi	r25, 0x2D	; 45
    2e9c:	49 f0       	breq	.+18     	; 0x2eb0 <vfprintf+0x98>
    2e9e:	90 33       	cpi	r25, 0x30	; 48
    2ea0:	69 f4       	brne	.+26     	; 0x2ebc <vfprintf+0xa4>
    2ea2:	41 e0       	ldi	r20, 0x01	; 1
    2ea4:	24 c0       	rjmp	.+72     	; 0x2eee <vfprintf+0xd6>
    2ea6:	52 e0       	ldi	r21, 0x02	; 2
    2ea8:	f5 2a       	or	r15, r21
    2eaa:	84 e0       	ldi	r24, 0x04	; 4
    2eac:	f8 2a       	or	r15, r24
    2eae:	28 c0       	rjmp	.+80     	; 0x2f00 <vfprintf+0xe8>
    2eb0:	98 e0       	ldi	r25, 0x08	; 8
    2eb2:	f9 2a       	or	r15, r25
    2eb4:	25 c0       	rjmp	.+74     	; 0x2f00 <vfprintf+0xe8>
    2eb6:	e0 e1       	ldi	r30, 0x10	; 16
    2eb8:	fe 2a       	or	r15, r30
    2eba:	22 c0       	rjmp	.+68     	; 0x2f00 <vfprintf+0xe8>
    2ebc:	f7 fc       	sbrc	r15, 7
    2ebe:	29 c0       	rjmp	.+82     	; 0x2f12 <vfprintf+0xfa>
    2ec0:	89 2f       	mov	r24, r25
    2ec2:	80 53       	subi	r24, 0x30	; 48
    2ec4:	8a 30       	cpi	r24, 0x0A	; 10
    2ec6:	70 f4       	brcc	.+28     	; 0x2ee4 <vfprintf+0xcc>
    2ec8:	f6 fe       	sbrs	r15, 6
    2eca:	05 c0       	rjmp	.+10     	; 0x2ed6 <vfprintf+0xbe>
    2ecc:	98 9c       	mul	r9, r8
    2ece:	90 2c       	mov	r9, r0
    2ed0:	11 24       	eor	r1, r1
    2ed2:	98 0e       	add	r9, r24
    2ed4:	15 c0       	rjmp	.+42     	; 0x2f00 <vfprintf+0xe8>
    2ed6:	e8 9c       	mul	r14, r8
    2ed8:	e0 2c       	mov	r14, r0
    2eda:	11 24       	eor	r1, r1
    2edc:	e8 0e       	add	r14, r24
    2ede:	f0 e2       	ldi	r31, 0x20	; 32
    2ee0:	ff 2a       	or	r15, r31
    2ee2:	0e c0       	rjmp	.+28     	; 0x2f00 <vfprintf+0xe8>
    2ee4:	9e 32       	cpi	r25, 0x2E	; 46
    2ee6:	29 f4       	brne	.+10     	; 0x2ef2 <vfprintf+0xda>
    2ee8:	f6 fc       	sbrc	r15, 6
    2eea:	6b c1       	rjmp	.+726    	; 0x31c2 <vfprintf+0x3aa>
    2eec:	40 e4       	ldi	r20, 0x40	; 64
    2eee:	f4 2a       	or	r15, r20
    2ef0:	07 c0       	rjmp	.+14     	; 0x2f00 <vfprintf+0xe8>
    2ef2:	9c 36       	cpi	r25, 0x6C	; 108
    2ef4:	19 f4       	brne	.+6      	; 0x2efc <vfprintf+0xe4>
    2ef6:	50 e8       	ldi	r21, 0x80	; 128
    2ef8:	f5 2a       	or	r15, r21
    2efa:	02 c0       	rjmp	.+4      	; 0x2f00 <vfprintf+0xe8>
    2efc:	98 36       	cpi	r25, 0x68	; 104
    2efe:	49 f4       	brne	.+18     	; 0x2f12 <vfprintf+0xfa>
    2f00:	f2 01       	movw	r30, r4
    2f02:	23 fd       	sbrc	r18, 3
    2f04:	95 91       	lpm	r25, Z+
    2f06:	23 ff       	sbrs	r18, 3
    2f08:	91 91       	ld	r25, Z+
    2f0a:	2f 01       	movw	r4, r30
    2f0c:	99 23       	and	r25, r25
    2f0e:	09 f0       	breq	.+2      	; 0x2f12 <vfprintf+0xfa>
    2f10:	b8 cf       	rjmp	.-144    	; 0x2e82 <vfprintf+0x6a>
    2f12:	89 2f       	mov	r24, r25
    2f14:	85 54       	subi	r24, 0x45	; 69
    2f16:	83 30       	cpi	r24, 0x03	; 3
    2f18:	18 f0       	brcs	.+6      	; 0x2f20 <vfprintf+0x108>
    2f1a:	80 52       	subi	r24, 0x20	; 32
    2f1c:	83 30       	cpi	r24, 0x03	; 3
    2f1e:	38 f4       	brcc	.+14     	; 0x2f2e <vfprintf+0x116>
    2f20:	44 e0       	ldi	r20, 0x04	; 4
    2f22:	50 e0       	ldi	r21, 0x00	; 0
    2f24:	a4 0e       	add	r10, r20
    2f26:	b5 1e       	adc	r11, r21
    2f28:	5f e3       	ldi	r21, 0x3F	; 63
    2f2a:	59 83       	std	Y+1, r21	; 0x01
    2f2c:	0f c0       	rjmp	.+30     	; 0x2f4c <vfprintf+0x134>
    2f2e:	93 36       	cpi	r25, 0x63	; 99
    2f30:	31 f0       	breq	.+12     	; 0x2f3e <vfprintf+0x126>
    2f32:	93 37       	cpi	r25, 0x73	; 115
    2f34:	79 f0       	breq	.+30     	; 0x2f54 <vfprintf+0x13c>
    2f36:	93 35       	cpi	r25, 0x53	; 83
    2f38:	09 f0       	breq	.+2      	; 0x2f3c <vfprintf+0x124>
    2f3a:	56 c0       	rjmp	.+172    	; 0x2fe8 <vfprintf+0x1d0>
    2f3c:	20 c0       	rjmp	.+64     	; 0x2f7e <vfprintf+0x166>
    2f3e:	f5 01       	movw	r30, r10
    2f40:	80 81       	ld	r24, Z
    2f42:	89 83       	std	Y+1, r24	; 0x01
    2f44:	42 e0       	ldi	r20, 0x02	; 2
    2f46:	50 e0       	ldi	r21, 0x00	; 0
    2f48:	a4 0e       	add	r10, r20
    2f4a:	b5 1e       	adc	r11, r21
    2f4c:	61 01       	movw	r12, r2
    2f4e:	01 e0       	ldi	r16, 0x01	; 1
    2f50:	10 e0       	ldi	r17, 0x00	; 0
    2f52:	12 c0       	rjmp	.+36     	; 0x2f78 <vfprintf+0x160>
    2f54:	f5 01       	movw	r30, r10
    2f56:	c0 80       	ld	r12, Z
    2f58:	d1 80       	ldd	r13, Z+1	; 0x01
    2f5a:	f6 fc       	sbrc	r15, 6
    2f5c:	03 c0       	rjmp	.+6      	; 0x2f64 <vfprintf+0x14c>
    2f5e:	6f ef       	ldi	r22, 0xFF	; 255
    2f60:	7f ef       	ldi	r23, 0xFF	; 255
    2f62:	02 c0       	rjmp	.+4      	; 0x2f68 <vfprintf+0x150>
    2f64:	69 2d       	mov	r22, r9
    2f66:	70 e0       	ldi	r23, 0x00	; 0
    2f68:	42 e0       	ldi	r20, 0x02	; 2
    2f6a:	50 e0       	ldi	r21, 0x00	; 0
    2f6c:	a4 0e       	add	r10, r20
    2f6e:	b5 1e       	adc	r11, r21
    2f70:	c6 01       	movw	r24, r12
    2f72:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <strnlen>
    2f76:	8c 01       	movw	r16, r24
    2f78:	5f e7       	ldi	r21, 0x7F	; 127
    2f7a:	f5 22       	and	r15, r21
    2f7c:	14 c0       	rjmp	.+40     	; 0x2fa6 <vfprintf+0x18e>
    2f7e:	f5 01       	movw	r30, r10
    2f80:	c0 80       	ld	r12, Z
    2f82:	d1 80       	ldd	r13, Z+1	; 0x01
    2f84:	f6 fc       	sbrc	r15, 6
    2f86:	03 c0       	rjmp	.+6      	; 0x2f8e <vfprintf+0x176>
    2f88:	6f ef       	ldi	r22, 0xFF	; 255
    2f8a:	7f ef       	ldi	r23, 0xFF	; 255
    2f8c:	02 c0       	rjmp	.+4      	; 0x2f92 <vfprintf+0x17a>
    2f8e:	69 2d       	mov	r22, r9
    2f90:	70 e0       	ldi	r23, 0x00	; 0
    2f92:	42 e0       	ldi	r20, 0x02	; 2
    2f94:	50 e0       	ldi	r21, 0x00	; 0
    2f96:	a4 0e       	add	r10, r20
    2f98:	b5 1e       	adc	r11, r21
    2f9a:	c6 01       	movw	r24, r12
    2f9c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <strnlen_P>
    2fa0:	8c 01       	movw	r16, r24
    2fa2:	50 e8       	ldi	r21, 0x80	; 128
    2fa4:	f5 2a       	or	r15, r21
    2fa6:	f3 fe       	sbrs	r15, 3
    2fa8:	07 c0       	rjmp	.+14     	; 0x2fb8 <vfprintf+0x1a0>
    2faa:	1a c0       	rjmp	.+52     	; 0x2fe0 <vfprintf+0x1c8>
    2fac:	80 e2       	ldi	r24, 0x20	; 32
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	b3 01       	movw	r22, r6
    2fb2:	0e 94 ff 18 	call	0x31fe	; 0x31fe <fputc>
    2fb6:	ea 94       	dec	r14
    2fb8:	8e 2d       	mov	r24, r14
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	08 17       	cp	r16, r24
    2fbe:	19 07       	cpc	r17, r25
    2fc0:	a8 f3       	brcs	.-22     	; 0x2fac <vfprintf+0x194>
    2fc2:	0e c0       	rjmp	.+28     	; 0x2fe0 <vfprintf+0x1c8>
    2fc4:	f6 01       	movw	r30, r12
    2fc6:	f7 fc       	sbrc	r15, 7
    2fc8:	85 91       	lpm	r24, Z+
    2fca:	f7 fe       	sbrs	r15, 7
    2fcc:	81 91       	ld	r24, Z+
    2fce:	6f 01       	movw	r12, r30
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	b3 01       	movw	r22, r6
    2fd4:	0e 94 ff 18 	call	0x31fe	; 0x31fe <fputc>
    2fd8:	e1 10       	cpse	r14, r1
    2fda:	ea 94       	dec	r14
    2fdc:	01 50       	subi	r16, 0x01	; 1
    2fde:	10 40       	sbci	r17, 0x00	; 0
    2fe0:	01 15       	cp	r16, r1
    2fe2:	11 05       	cpc	r17, r1
    2fe4:	79 f7       	brne	.-34     	; 0x2fc4 <vfprintf+0x1ac>
    2fe6:	ea c0       	rjmp	.+468    	; 0x31bc <vfprintf+0x3a4>
    2fe8:	94 36       	cpi	r25, 0x64	; 100
    2fea:	11 f0       	breq	.+4      	; 0x2ff0 <vfprintf+0x1d8>
    2fec:	99 36       	cpi	r25, 0x69	; 105
    2fee:	69 f5       	brne	.+90     	; 0x304a <vfprintf+0x232>
    2ff0:	f7 fe       	sbrs	r15, 7
    2ff2:	08 c0       	rjmp	.+16     	; 0x3004 <vfprintf+0x1ec>
    2ff4:	f5 01       	movw	r30, r10
    2ff6:	20 81       	ld	r18, Z
    2ff8:	31 81       	ldd	r19, Z+1	; 0x01
    2ffa:	42 81       	ldd	r20, Z+2	; 0x02
    2ffc:	53 81       	ldd	r21, Z+3	; 0x03
    2ffe:	84 e0       	ldi	r24, 0x04	; 4
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	0a c0       	rjmp	.+20     	; 0x3018 <vfprintf+0x200>
    3004:	f5 01       	movw	r30, r10
    3006:	80 81       	ld	r24, Z
    3008:	91 81       	ldd	r25, Z+1	; 0x01
    300a:	9c 01       	movw	r18, r24
    300c:	44 27       	eor	r20, r20
    300e:	37 fd       	sbrc	r19, 7
    3010:	40 95       	com	r20
    3012:	54 2f       	mov	r21, r20
    3014:	82 e0       	ldi	r24, 0x02	; 2
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	a8 0e       	add	r10, r24
    301a:	b9 1e       	adc	r11, r25
    301c:	9f e6       	ldi	r25, 0x6F	; 111
    301e:	f9 22       	and	r15, r25
    3020:	57 ff       	sbrs	r21, 7
    3022:	09 c0       	rjmp	.+18     	; 0x3036 <vfprintf+0x21e>
    3024:	50 95       	com	r21
    3026:	40 95       	com	r20
    3028:	30 95       	com	r19
    302a:	21 95       	neg	r18
    302c:	3f 4f       	sbci	r19, 0xFF	; 255
    302e:	4f 4f       	sbci	r20, 0xFF	; 255
    3030:	5f 4f       	sbci	r21, 0xFF	; 255
    3032:	e0 e8       	ldi	r30, 0x80	; 128
    3034:	fe 2a       	or	r15, r30
    3036:	ca 01       	movw	r24, r20
    3038:	b9 01       	movw	r22, r18
    303a:	a1 01       	movw	r20, r2
    303c:	2a e0       	ldi	r18, 0x0A	; 10
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	0e 94 2b 19 	call	0x3256	; 0x3256 <__ultoa_invert>
    3044:	d8 2e       	mov	r13, r24
    3046:	d2 18       	sub	r13, r2
    3048:	40 c0       	rjmp	.+128    	; 0x30ca <vfprintf+0x2b2>
    304a:	95 37       	cpi	r25, 0x75	; 117
    304c:	29 f4       	brne	.+10     	; 0x3058 <vfprintf+0x240>
    304e:	1f 2d       	mov	r17, r15
    3050:	1f 7e       	andi	r17, 0xEF	; 239
    3052:	2a e0       	ldi	r18, 0x0A	; 10
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	1d c0       	rjmp	.+58     	; 0x3092 <vfprintf+0x27a>
    3058:	1f 2d       	mov	r17, r15
    305a:	19 7f       	andi	r17, 0xF9	; 249
    305c:	9f 36       	cpi	r25, 0x6F	; 111
    305e:	61 f0       	breq	.+24     	; 0x3078 <vfprintf+0x260>
    3060:	90 37       	cpi	r25, 0x70	; 112
    3062:	20 f4       	brcc	.+8      	; 0x306c <vfprintf+0x254>
    3064:	98 35       	cpi	r25, 0x58	; 88
    3066:	09 f0       	breq	.+2      	; 0x306a <vfprintf+0x252>
    3068:	ac c0       	rjmp	.+344    	; 0x31c2 <vfprintf+0x3aa>
    306a:	0f c0       	rjmp	.+30     	; 0x308a <vfprintf+0x272>
    306c:	90 37       	cpi	r25, 0x70	; 112
    306e:	39 f0       	breq	.+14     	; 0x307e <vfprintf+0x266>
    3070:	98 37       	cpi	r25, 0x78	; 120
    3072:	09 f0       	breq	.+2      	; 0x3076 <vfprintf+0x25e>
    3074:	a6 c0       	rjmp	.+332    	; 0x31c2 <vfprintf+0x3aa>
    3076:	04 c0       	rjmp	.+8      	; 0x3080 <vfprintf+0x268>
    3078:	28 e0       	ldi	r18, 0x08	; 8
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	0a c0       	rjmp	.+20     	; 0x3092 <vfprintf+0x27a>
    307e:	10 61       	ori	r17, 0x10	; 16
    3080:	14 fd       	sbrc	r17, 4
    3082:	14 60       	ori	r17, 0x04	; 4
    3084:	20 e1       	ldi	r18, 0x10	; 16
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	04 c0       	rjmp	.+8      	; 0x3092 <vfprintf+0x27a>
    308a:	14 fd       	sbrc	r17, 4
    308c:	16 60       	ori	r17, 0x06	; 6
    308e:	20 e1       	ldi	r18, 0x10	; 16
    3090:	32 e0       	ldi	r19, 0x02	; 2
    3092:	17 ff       	sbrs	r17, 7
    3094:	08 c0       	rjmp	.+16     	; 0x30a6 <vfprintf+0x28e>
    3096:	f5 01       	movw	r30, r10
    3098:	60 81       	ld	r22, Z
    309a:	71 81       	ldd	r23, Z+1	; 0x01
    309c:	82 81       	ldd	r24, Z+2	; 0x02
    309e:	93 81       	ldd	r25, Z+3	; 0x03
    30a0:	44 e0       	ldi	r20, 0x04	; 4
    30a2:	50 e0       	ldi	r21, 0x00	; 0
    30a4:	08 c0       	rjmp	.+16     	; 0x30b6 <vfprintf+0x29e>
    30a6:	f5 01       	movw	r30, r10
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	bc 01       	movw	r22, r24
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	42 e0       	ldi	r20, 0x02	; 2
    30b4:	50 e0       	ldi	r21, 0x00	; 0
    30b6:	a4 0e       	add	r10, r20
    30b8:	b5 1e       	adc	r11, r21
    30ba:	a1 01       	movw	r20, r2
    30bc:	0e 94 2b 19 	call	0x3256	; 0x3256 <__ultoa_invert>
    30c0:	d8 2e       	mov	r13, r24
    30c2:	d2 18       	sub	r13, r2
    30c4:	8f e7       	ldi	r24, 0x7F	; 127
    30c6:	f8 2e       	mov	r15, r24
    30c8:	f1 22       	and	r15, r17
    30ca:	f6 fe       	sbrs	r15, 6
    30cc:	0b c0       	rjmp	.+22     	; 0x30e4 <vfprintf+0x2cc>
    30ce:	5e ef       	ldi	r21, 0xFE	; 254
    30d0:	f5 22       	and	r15, r21
    30d2:	d9 14       	cp	r13, r9
    30d4:	38 f4       	brcc	.+14     	; 0x30e4 <vfprintf+0x2cc>
    30d6:	f4 fe       	sbrs	r15, 4
    30d8:	07 c0       	rjmp	.+14     	; 0x30e8 <vfprintf+0x2d0>
    30da:	f2 fc       	sbrc	r15, 2
    30dc:	05 c0       	rjmp	.+10     	; 0x30e8 <vfprintf+0x2d0>
    30de:	8f ee       	ldi	r24, 0xEF	; 239
    30e0:	f8 22       	and	r15, r24
    30e2:	02 c0       	rjmp	.+4      	; 0x30e8 <vfprintf+0x2d0>
    30e4:	1d 2d       	mov	r17, r13
    30e6:	01 c0       	rjmp	.+2      	; 0x30ea <vfprintf+0x2d2>
    30e8:	19 2d       	mov	r17, r9
    30ea:	f4 fe       	sbrs	r15, 4
    30ec:	0d c0       	rjmp	.+26     	; 0x3108 <vfprintf+0x2f0>
    30ee:	fe 01       	movw	r30, r28
    30f0:	ed 0d       	add	r30, r13
    30f2:	f1 1d       	adc	r31, r1
    30f4:	80 81       	ld	r24, Z
    30f6:	80 33       	cpi	r24, 0x30	; 48
    30f8:	19 f4       	brne	.+6      	; 0x3100 <vfprintf+0x2e8>
    30fa:	99 ee       	ldi	r25, 0xE9	; 233
    30fc:	f9 22       	and	r15, r25
    30fe:	08 c0       	rjmp	.+16     	; 0x3110 <vfprintf+0x2f8>
    3100:	1f 5f       	subi	r17, 0xFF	; 255
    3102:	f2 fe       	sbrs	r15, 2
    3104:	05 c0       	rjmp	.+10     	; 0x3110 <vfprintf+0x2f8>
    3106:	03 c0       	rjmp	.+6      	; 0x310e <vfprintf+0x2f6>
    3108:	8f 2d       	mov	r24, r15
    310a:	86 78       	andi	r24, 0x86	; 134
    310c:	09 f0       	breq	.+2      	; 0x3110 <vfprintf+0x2f8>
    310e:	1f 5f       	subi	r17, 0xFF	; 255
    3110:	0f 2d       	mov	r16, r15
    3112:	f3 fc       	sbrc	r15, 3
    3114:	14 c0       	rjmp	.+40     	; 0x313e <vfprintf+0x326>
    3116:	f0 fe       	sbrs	r15, 0
    3118:	0f c0       	rjmp	.+30     	; 0x3138 <vfprintf+0x320>
    311a:	1e 15       	cp	r17, r14
    311c:	10 f0       	brcs	.+4      	; 0x3122 <vfprintf+0x30a>
    311e:	9d 2c       	mov	r9, r13
    3120:	0b c0       	rjmp	.+22     	; 0x3138 <vfprintf+0x320>
    3122:	9d 2c       	mov	r9, r13
    3124:	9e 0c       	add	r9, r14
    3126:	91 1a       	sub	r9, r17
    3128:	1e 2d       	mov	r17, r14
    312a:	06 c0       	rjmp	.+12     	; 0x3138 <vfprintf+0x320>
    312c:	80 e2       	ldi	r24, 0x20	; 32
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	b3 01       	movw	r22, r6
    3132:	0e 94 ff 18 	call	0x31fe	; 0x31fe <fputc>
    3136:	1f 5f       	subi	r17, 0xFF	; 255
    3138:	1e 15       	cp	r17, r14
    313a:	c0 f3       	brcs	.-16     	; 0x312c <vfprintf+0x314>
    313c:	04 c0       	rjmp	.+8      	; 0x3146 <vfprintf+0x32e>
    313e:	1e 15       	cp	r17, r14
    3140:	10 f4       	brcc	.+4      	; 0x3146 <vfprintf+0x32e>
    3142:	e1 1a       	sub	r14, r17
    3144:	01 c0       	rjmp	.+2      	; 0x3148 <vfprintf+0x330>
    3146:	ee 24       	eor	r14, r14
    3148:	04 ff       	sbrs	r16, 4
    314a:	0f c0       	rjmp	.+30     	; 0x316a <vfprintf+0x352>
    314c:	80 e3       	ldi	r24, 0x30	; 48
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	b3 01       	movw	r22, r6
    3152:	0e 94 ff 18 	call	0x31fe	; 0x31fe <fputc>
    3156:	02 ff       	sbrs	r16, 2
    3158:	1d c0       	rjmp	.+58     	; 0x3194 <vfprintf+0x37c>
    315a:	01 fd       	sbrc	r16, 1
    315c:	03 c0       	rjmp	.+6      	; 0x3164 <vfprintf+0x34c>
    315e:	88 e7       	ldi	r24, 0x78	; 120
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	0e c0       	rjmp	.+28     	; 0x3180 <vfprintf+0x368>
    3164:	88 e5       	ldi	r24, 0x58	; 88
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	0b c0       	rjmp	.+22     	; 0x3180 <vfprintf+0x368>
    316a:	80 2f       	mov	r24, r16
    316c:	86 78       	andi	r24, 0x86	; 134
    316e:	91 f0       	breq	.+36     	; 0x3194 <vfprintf+0x37c>
    3170:	01 ff       	sbrs	r16, 1
    3172:	02 c0       	rjmp	.+4      	; 0x3178 <vfprintf+0x360>
    3174:	8b e2       	ldi	r24, 0x2B	; 43
    3176:	01 c0       	rjmp	.+2      	; 0x317a <vfprintf+0x362>
    3178:	80 e2       	ldi	r24, 0x20	; 32
    317a:	f7 fc       	sbrc	r15, 7
    317c:	8d e2       	ldi	r24, 0x2D	; 45
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	b3 01       	movw	r22, r6
    3182:	0e 94 ff 18 	call	0x31fe	; 0x31fe <fputc>
    3186:	06 c0       	rjmp	.+12     	; 0x3194 <vfprintf+0x37c>
    3188:	80 e3       	ldi	r24, 0x30	; 48
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	b3 01       	movw	r22, r6
    318e:	0e 94 ff 18 	call	0x31fe	; 0x31fe <fputc>
    3192:	9a 94       	dec	r9
    3194:	d9 14       	cp	r13, r9
    3196:	c0 f3       	brcs	.-16     	; 0x3188 <vfprintf+0x370>
    3198:	da 94       	dec	r13
    319a:	f1 01       	movw	r30, r2
    319c:	ed 0d       	add	r30, r13
    319e:	f1 1d       	adc	r31, r1
    31a0:	80 81       	ld	r24, Z
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	b3 01       	movw	r22, r6
    31a6:	0e 94 ff 18 	call	0x31fe	; 0x31fe <fputc>
    31aa:	dd 20       	and	r13, r13
    31ac:	a9 f7       	brne	.-22     	; 0x3198 <vfprintf+0x380>
    31ae:	06 c0       	rjmp	.+12     	; 0x31bc <vfprintf+0x3a4>
    31b0:	80 e2       	ldi	r24, 0x20	; 32
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	b3 01       	movw	r22, r6
    31b6:	0e 94 ff 18 	call	0x31fe	; 0x31fe <fputc>
    31ba:	ea 94       	dec	r14
    31bc:	ee 20       	and	r14, r14
    31be:	c1 f7       	brne	.-16     	; 0x31b0 <vfprintf+0x398>
    31c0:	43 ce       	rjmp	.-890    	; 0x2e48 <vfprintf+0x30>
    31c2:	f3 01       	movw	r30, r6
    31c4:	66 81       	ldd	r22, Z+6	; 0x06
    31c6:	77 81       	ldd	r23, Z+7	; 0x07
    31c8:	cb 01       	movw	r24, r22
    31ca:	2b 96       	adiw	r28, 0x0b	; 11
    31cc:	e2 e1       	ldi	r30, 0x12	; 18
    31ce:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__epilogue_restores__>

000031d2 <strnlen_P>:
    31d2:	fc 01       	movw	r30, r24
    31d4:	05 90       	lpm	r0, Z+
    31d6:	61 50       	subi	r22, 0x01	; 1
    31d8:	70 40       	sbci	r23, 0x00	; 0
    31da:	01 10       	cpse	r0, r1
    31dc:	d8 f7       	brcc	.-10     	; 0x31d4 <strnlen_P+0x2>
    31de:	80 95       	com	r24
    31e0:	90 95       	com	r25
    31e2:	8e 0f       	add	r24, r30
    31e4:	9f 1f       	adc	r25, r31
    31e6:	08 95       	ret

000031e8 <strnlen>:
    31e8:	fc 01       	movw	r30, r24
    31ea:	61 50       	subi	r22, 0x01	; 1
    31ec:	70 40       	sbci	r23, 0x00	; 0
    31ee:	01 90       	ld	r0, Z+
    31f0:	01 10       	cpse	r0, r1
    31f2:	d8 f7       	brcc	.-10     	; 0x31ea <strnlen+0x2>
    31f4:	80 95       	com	r24
    31f6:	90 95       	com	r25
    31f8:	8e 0f       	add	r24, r30
    31fa:	9f 1f       	adc	r25, r31
    31fc:	08 95       	ret

000031fe <fputc>:
    31fe:	0f 93       	push	r16
    3200:	1f 93       	push	r17
    3202:	cf 93       	push	r28
    3204:	df 93       	push	r29
    3206:	8c 01       	movw	r16, r24
    3208:	eb 01       	movw	r28, r22
    320a:	8b 81       	ldd	r24, Y+3	; 0x03
    320c:	81 ff       	sbrs	r24, 1
    320e:	1b c0       	rjmp	.+54     	; 0x3246 <fputc+0x48>
    3210:	82 ff       	sbrs	r24, 2
    3212:	0d c0       	rjmp	.+26     	; 0x322e <fputc+0x30>
    3214:	2e 81       	ldd	r18, Y+6	; 0x06
    3216:	3f 81       	ldd	r19, Y+7	; 0x07
    3218:	8c 81       	ldd	r24, Y+4	; 0x04
    321a:	9d 81       	ldd	r25, Y+5	; 0x05
    321c:	28 17       	cp	r18, r24
    321e:	39 07       	cpc	r19, r25
    3220:	64 f4       	brge	.+24     	; 0x323a <fputc+0x3c>
    3222:	e8 81       	ld	r30, Y
    3224:	f9 81       	ldd	r31, Y+1	; 0x01
    3226:	01 93       	st	Z+, r16
    3228:	f9 83       	std	Y+1, r31	; 0x01
    322a:	e8 83       	st	Y, r30
    322c:	06 c0       	rjmp	.+12     	; 0x323a <fputc+0x3c>
    322e:	e8 85       	ldd	r30, Y+8	; 0x08
    3230:	f9 85       	ldd	r31, Y+9	; 0x09
    3232:	80 2f       	mov	r24, r16
    3234:	09 95       	icall
    3236:	89 2b       	or	r24, r25
    3238:	31 f4       	brne	.+12     	; 0x3246 <fputc+0x48>
    323a:	8e 81       	ldd	r24, Y+6	; 0x06
    323c:	9f 81       	ldd	r25, Y+7	; 0x07
    323e:	01 96       	adiw	r24, 0x01	; 1
    3240:	9f 83       	std	Y+7, r25	; 0x07
    3242:	8e 83       	std	Y+6, r24	; 0x06
    3244:	02 c0       	rjmp	.+4      	; 0x324a <fputc+0x4c>
    3246:	0f ef       	ldi	r16, 0xFF	; 255
    3248:	1f ef       	ldi	r17, 0xFF	; 255
    324a:	c8 01       	movw	r24, r16
    324c:	df 91       	pop	r29
    324e:	cf 91       	pop	r28
    3250:	1f 91       	pop	r17
    3252:	0f 91       	pop	r16
    3254:	08 95       	ret

00003256 <__ultoa_invert>:
    3256:	fa 01       	movw	r30, r20
    3258:	aa 27       	eor	r26, r26
    325a:	28 30       	cpi	r18, 0x08	; 8
    325c:	51 f1       	breq	.+84     	; 0x32b2 <__ultoa_invert+0x5c>
    325e:	20 31       	cpi	r18, 0x10	; 16
    3260:	81 f1       	breq	.+96     	; 0x32c2 <__ultoa_invert+0x6c>
    3262:	e8 94       	clt
    3264:	6f 93       	push	r22
    3266:	6e 7f       	andi	r22, 0xFE	; 254
    3268:	6e 5f       	subi	r22, 0xFE	; 254
    326a:	7f 4f       	sbci	r23, 0xFF	; 255
    326c:	8f 4f       	sbci	r24, 0xFF	; 255
    326e:	9f 4f       	sbci	r25, 0xFF	; 255
    3270:	af 4f       	sbci	r26, 0xFF	; 255
    3272:	b1 e0       	ldi	r27, 0x01	; 1
    3274:	3e d0       	rcall	.+124    	; 0x32f2 <__ultoa_invert+0x9c>
    3276:	b4 e0       	ldi	r27, 0x04	; 4
    3278:	3c d0       	rcall	.+120    	; 0x32f2 <__ultoa_invert+0x9c>
    327a:	67 0f       	add	r22, r23
    327c:	78 1f       	adc	r23, r24
    327e:	89 1f       	adc	r24, r25
    3280:	9a 1f       	adc	r25, r26
    3282:	a1 1d       	adc	r26, r1
    3284:	68 0f       	add	r22, r24
    3286:	79 1f       	adc	r23, r25
    3288:	8a 1f       	adc	r24, r26
    328a:	91 1d       	adc	r25, r1
    328c:	a1 1d       	adc	r26, r1
    328e:	6a 0f       	add	r22, r26
    3290:	71 1d       	adc	r23, r1
    3292:	81 1d       	adc	r24, r1
    3294:	91 1d       	adc	r25, r1
    3296:	a1 1d       	adc	r26, r1
    3298:	20 d0       	rcall	.+64     	; 0x32da <__ultoa_invert+0x84>
    329a:	09 f4       	brne	.+2      	; 0x329e <__ultoa_invert+0x48>
    329c:	68 94       	set
    329e:	3f 91       	pop	r19
    32a0:	2a e0       	ldi	r18, 0x0A	; 10
    32a2:	26 9f       	mul	r18, r22
    32a4:	11 24       	eor	r1, r1
    32a6:	30 19       	sub	r19, r0
    32a8:	30 5d       	subi	r19, 0xD0	; 208
    32aa:	31 93       	st	Z+, r19
    32ac:	de f6       	brtc	.-74     	; 0x3264 <__ultoa_invert+0xe>
    32ae:	cf 01       	movw	r24, r30
    32b0:	08 95       	ret
    32b2:	46 2f       	mov	r20, r22
    32b4:	47 70       	andi	r20, 0x07	; 7
    32b6:	40 5d       	subi	r20, 0xD0	; 208
    32b8:	41 93       	st	Z+, r20
    32ba:	b3 e0       	ldi	r27, 0x03	; 3
    32bc:	0f d0       	rcall	.+30     	; 0x32dc <__ultoa_invert+0x86>
    32be:	c9 f7       	brne	.-14     	; 0x32b2 <__ultoa_invert+0x5c>
    32c0:	f6 cf       	rjmp	.-20     	; 0x32ae <__ultoa_invert+0x58>
    32c2:	46 2f       	mov	r20, r22
    32c4:	4f 70       	andi	r20, 0x0F	; 15
    32c6:	40 5d       	subi	r20, 0xD0	; 208
    32c8:	4a 33       	cpi	r20, 0x3A	; 58
    32ca:	18 f0       	brcs	.+6      	; 0x32d2 <__ultoa_invert+0x7c>
    32cc:	49 5d       	subi	r20, 0xD9	; 217
    32ce:	31 fd       	sbrc	r19, 1
    32d0:	40 52       	subi	r20, 0x20	; 32
    32d2:	41 93       	st	Z+, r20
    32d4:	02 d0       	rcall	.+4      	; 0x32da <__ultoa_invert+0x84>
    32d6:	a9 f7       	brne	.-22     	; 0x32c2 <__ultoa_invert+0x6c>
    32d8:	ea cf       	rjmp	.-44     	; 0x32ae <__ultoa_invert+0x58>
    32da:	b4 e0       	ldi	r27, 0x04	; 4
    32dc:	a6 95       	lsr	r26
    32de:	97 95       	ror	r25
    32e0:	87 95       	ror	r24
    32e2:	77 95       	ror	r23
    32e4:	67 95       	ror	r22
    32e6:	ba 95       	dec	r27
    32e8:	c9 f7       	brne	.-14     	; 0x32dc <__ultoa_invert+0x86>
    32ea:	00 97       	sbiw	r24, 0x00	; 0
    32ec:	61 05       	cpc	r22, r1
    32ee:	71 05       	cpc	r23, r1
    32f0:	08 95       	ret
    32f2:	9b 01       	movw	r18, r22
    32f4:	ac 01       	movw	r20, r24
    32f6:	0a 2e       	mov	r0, r26
    32f8:	06 94       	lsr	r0
    32fa:	57 95       	ror	r21
    32fc:	47 95       	ror	r20
    32fe:	37 95       	ror	r19
    3300:	27 95       	ror	r18
    3302:	ba 95       	dec	r27
    3304:	c9 f7       	brne	.-14     	; 0x32f8 <__ultoa_invert+0xa2>
    3306:	62 0f       	add	r22, r18
    3308:	73 1f       	adc	r23, r19
    330a:	84 1f       	adc	r24, r20
    330c:	95 1f       	adc	r25, r21
    330e:	a0 1d       	adc	r26, r0
    3310:	08 95       	ret

00003312 <_exit>:
    3312:	f8 94       	cli

00003314 <__stop_program>:
    3314:	ff cf       	rjmp	.-2      	; 0x3314 <__stop_program>
